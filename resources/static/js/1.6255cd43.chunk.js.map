{"version":3,"sources":["../node_modules/codemirror/mode/javascript/javascript.js"],"names":["CodeMirror","defineMode","config","parserConfig","type","content","indentUnit","statementIndent","jsonldMode","jsonld","jsonMode","json","isTS","typescript","wordRE","wordCharacters","keywords","kw","style","A","B","C","D","operator","atom","isOperatorChar","isJsonldKeyword","ret","tp","cont","tokenBase","stream","state","quote","ch","next","tokenize","escaped","peek","match","test","eat","eatWhile","tokenComment","skipToEnd","expressionAllowed","inSet","readRegexp","current","tokenQuasi","lexical","word","lastType","propertyIsEnumerable","maybeEnd","findFatArrow","fatArrowAt","arrow","string","indexOf","start","m","exec","slice","index","depth","sawSomething","pos","charAt","bracket","atomicTypes","JSLexical","indented","column","align","prev","info","this","inScope","varname","v","localVars","name","cx","context","vars","marked","cc","pass","i","arguments","length","push","apply","register","inList","list","globalVars","isModifier","defaultVars","pushcontext","popcontext","pushlex","result","indent","outer","lex","poplex","expect","wanted","exp","statement","value","vardef","parenExpr","maybeexpression","block","pop","maybeelse","functiondef","forspec","className","enumdef","typeexpr","pattern","expression","maybelabel","funarg","afterExport","afterImport","expressionInner","expressionNoComma","noComma","body","arrowBodyNoComma","arrowBody","commasep","maybeop","maybeoperatorNoComma","maybeoperatorComma","hasOwnProperty","classExpression","arrayLiteral","contCommasep","objprop","quasi","targetNoComma","target","maybeTypeArgs","maybeTarget","me","expr","property","backUp","continueQuasi","_","getterSetter","afterprop","maybetype","what","end","sep","proceed","mayberettype","isKW","afterType","typeprop","typearg","maybeReturnType","typeparam","maybeTypeDefault","maybeAssign","vardefCont","proppattern","_type","forspec1","forspec2","formaybeinof","forspec3","classNameAfter","classBody","classfield","maybeFrom","exportField","importSpec","maybeMoreImports","maybeAs","enummember","startState","basecolumn","token","sol","indentation","eatSpace","parseJS","textAfter","Pass","top","firstChar","c","closing","isContinuedStatement","doubleIndentSwitch","electricInput","blockCommentStart","blockCommentEnd","blockCommentContinue","lineComment","fold","closeBrackets","helperType","skipExpression","registerHelper","defineMIME","mod"],"mappings":"+EAUG,SAASA,GACZ,aAEAA,EAAWC,WAAW,cAAc,SAASC,EAAQC,GACnD,IA6CIC,EAAMC,EA7CNC,EAAaJ,EAAOI,WACpBC,EAAkBJ,EAAaI,gBAC/BC,EAAaL,EAAaM,OAC1BC,EAAWP,EAAaQ,MAAQH,EAChCI,EAAOT,EAAaU,WACpBC,EAASX,EAAaY,gBAAkB,mBAIxCC,EAAW,WACb,SAASC,EAAGb,GAAO,MAAO,CAACA,KAAMA,EAAMc,MAAO,WAC9C,IAAIC,EAAIF,EAAG,aAAcG,EAAIH,EAAG,aAAcI,EAAIJ,EAAG,aAAcK,EAAIL,EAAG,aACtEM,EAAWN,EAAG,YAAaO,EAAO,CAACpB,KAAM,OAAQc,MAAO,QAE5D,MAAO,CACL,GAAMD,EAAG,MAAO,MAASE,EAAG,KAAQA,EAAG,KAAQC,EAAG,GAAMA,EAAG,IAAOA,EAAG,QAAWA,EAChF,OAAUE,EAAG,MAASA,EAAG,SAAYA,EAAG,IAAOL,EAAG,OAAQ,OAAUI,EAAG,KAAQA,EAAG,MAASA,EAC3F,SAAYJ,EAAG,YAAa,IAAOA,EAAG,OAAQ,MAASA,EAAG,OAAQ,IAAOA,EAAG,OAC5E,SAAYA,EAAG,YAAa,MAASA,EAAG,SACxC,IAAOA,EAAG,OAAQ,OAAUA,EAAG,UAAW,KAAQA,EAAG,QAAS,QAAWA,EAAG,WAC5E,GAAMM,EAAU,OAAUA,EAAU,WAAcA,EAClD,KAAQC,EAAM,MAASA,EAAM,KAAQA,EAAM,UAAaA,EAAM,IAAOA,EAAM,SAAYA,EACvF,KAAQP,EAAG,QAAS,MAASA,EAAG,SAAU,MAASA,EAAG,QACtD,MAASI,EAAG,OAAUJ,EAAG,UAAW,OAAUA,EAAG,UAAW,QAAWI,EACvE,MAASA,GAfE,GAmBXI,EAAiB,oBACjBC,EAAkB,wFAiBtB,SAASC,EAAIC,EAAIV,EAAOW,GAEtB,OADAzB,EAAOwB,EAAIvB,EAAUwB,EACdX,EAET,SAASY,EAAUC,EAAQC,GACzB,IAsEmBC,EAtEfC,EAAKH,EAAOI,OAChB,GAAU,KAAND,GAAmB,KAANA,EAEf,OADAF,EAAMI,UAoEWH,EApEYC,EAqExB,SAASH,EAAQC,GACtB,IAAqBG,EAAjBE,GAAU,EACd,GAAI7B,GAA+B,KAAjBuB,EAAOO,QAAiBP,EAAOQ,MAAMb,GAErD,OADAM,EAAMI,SAAWN,EACVH,EAAI,iBAAkB,QAE/B,KAAiC,OAAzBQ,EAAOJ,EAAOI,UAChBA,GAAQF,GAAUI,IACtBA,GAAWA,GAAmB,MAARF,EAGxB,OADKE,IAASL,EAAMI,SAAWN,GACxBH,EAAI,SAAU,YA/EdK,EAAMI,SAASL,EAAQC,GACzB,GAAU,KAANE,GAAaH,EAAOQ,MAAM,0BACnC,OAAOZ,EAAI,SAAU,UAChB,GAAU,KAANO,GAAaH,EAAOQ,MAAM,MACnC,OAAOZ,EAAI,SAAU,QAChB,GAAI,qBAAqBa,KAAKN,GACnC,OAAOP,EAAIO,GACN,GAAU,KAANA,GAAaH,EAAOU,IAAI,KACjC,OAAOd,EAAI,KAAM,YACZ,GAAU,KAANO,GAAaH,EAAOU,IAAI,MAEjC,OADAV,EAAOW,SAAS,YACTf,EAAI,SAAU,UAChB,GAAU,KAANO,GAAaH,EAAOU,IAAI,MAEjC,OADAV,EAAOW,SAAS,UACTf,EAAI,SAAU,UAChB,GAAU,KAANO,GAAaH,EAAOU,IAAI,MAEjC,OADAV,EAAOW,SAAS,SACTf,EAAI,SAAU,UAChB,GAAI,KAAKa,KAAKN,GAEnB,OADAH,EAAOQ,MAAM,oCACNZ,EAAI,SAAU,UAChB,GAAU,KAANO,EACT,OAAIH,EAAOU,IAAI,MACbT,EAAMI,SAAWO,EACVA,EAAaZ,EAAQC,IACnBD,EAAOU,IAAI,MACpBV,EAAOa,YACAjB,EAAI,UAAW,YACbkB,GAAkBd,EAAQC,EAAO,IAnDhD,SAAoBD,GAElB,IADA,IAAqBI,EAAjBE,GAAU,EAAaS,GAAQ,EACF,OAAzBX,EAAOJ,EAAOI,SAAiB,CACrC,IAAKE,EAAS,CACZ,GAAY,KAARF,IAAgBW,EAAO,OACf,KAARX,EAAaW,GAAQ,EAChBA,GAAiB,KAARX,IAAaW,GAAQ,GAEzCT,GAAWA,GAAmB,MAARF,GA4CpBY,CAAWhB,GACXA,EAAOQ,MAAM,mCACNZ,EAAI,SAAU,cAErBI,EAAOU,IAAI,KACJd,EAAI,WAAY,WAAYI,EAAOiB,YAEvC,GAAU,KAANd,EAET,OADAF,EAAMI,SAAWa,EACVA,EAAWlB,EAAQC,GACrB,GAAU,KAANE,EAET,OADAH,EAAOa,YACAjB,EAAI,QAAS,SACf,GAAIF,EAAee,KAAKN,GAS7B,MARU,KAANA,GAAcF,EAAMkB,SAAiC,KAAtBlB,EAAMkB,QAAQ9C,OAC3C2B,EAAOU,IAAI,KACH,KAANP,GAAmB,KAANA,GAAWH,EAAOU,IAAI,KAC9B,WAAWD,KAAKN,KACzBH,EAAOU,IAAIP,GACD,KAANA,GAAWH,EAAOU,IAAIP,KAGvBP,EAAI,WAAY,WAAYI,EAAOiB,WACrC,GAAIlC,EAAO0B,KAAKN,GAAK,CAC1BH,EAAOW,SAAS5B,GAChB,IAAIqC,EAAOpB,EAAOiB,UAClB,GAAsB,KAAlBhB,EAAMoB,SAAiB,CACzB,GAAIpC,EAASqC,qBAAqBF,GAAO,CACvC,IAAIlC,EAAKD,EAASmC,GAClB,OAAOxB,EAAIV,EAAGb,KAAMa,EAAGC,MAAOiC,GAEhC,GAAY,SAARA,GAAmBpB,EAAOQ,MAAM,4BAA4B,GAC9D,OAAOZ,EAAI,QAAS,UAAWwB,GAEnC,OAAOxB,EAAI,WAAY,WAAYwB,IAoBvC,SAASR,EAAaZ,EAAQC,GAE5B,IADA,IAAsBE,EAAlBoB,GAAW,EACRpB,EAAKH,EAAOI,QAAQ,CACzB,GAAU,KAAND,GAAaoB,EAAU,CACzBtB,EAAMI,SAAWN,EACjB,MAEFwB,EAAkB,KAANpB,EAEd,OAAOP,EAAI,UAAW,WAGxB,SAASsB,EAAWlB,EAAQC,GAE1B,IADA,IAAqBG,EAAjBE,GAAU,EACmB,OAAzBF,EAAOJ,EAAOI,SAAiB,CACrC,IAAKE,IAAoB,KAARF,GAAuB,KAARA,GAAeJ,EAAOU,IAAI,MAAO,CAC/DT,EAAMI,SAAWN,EACjB,MAEFO,GAAWA,GAAmB,MAARF,EAExB,OAAOR,EAAI,QAAS,WAAYI,EAAOiB,WAWzC,SAASO,EAAaxB,EAAQC,GACxBA,EAAMwB,aAAYxB,EAAMwB,WAAa,MACzC,IAAIC,EAAQ1B,EAAO2B,OAAOC,QAAQ,KAAM5B,EAAO6B,OAC/C,KAAIH,EAAQ,GAAZ,CAEA,GAAI7C,EAAM,CACR,IAAIiD,EAAI,6CAA6CC,KAAK/B,EAAO2B,OAAOK,MAAMhC,EAAO6B,MAAOH,IACxFI,IAAGJ,EAAQI,EAAEG,OAInB,IADA,IAAIC,EAAQ,EAAGC,GAAe,EACrBC,EAAMV,EAAQ,EAAGU,GAAO,IAAKA,EAAK,CACzC,IAAIjC,EAAKH,EAAO2B,OAAOU,OAAOD,GAC1BE,EArBO,SAqBYV,QAAQzB,GAC/B,GAAImC,GAAW,GAAKA,EAAU,EAAG,CAC/B,IAAKJ,EAAO,GAAIE,EAAK,MACrB,GAAe,KAATF,EAAY,CAAY,KAAN/B,IAAWgC,GAAe,GAAM,YACnD,GAAIG,GAAW,GAAKA,EAAU,IACjCJ,OACG,GAAInD,EAAO0B,KAAKN,GACrBgC,GAAe,MACV,IAAI,SAAS1B,KAAKN,GACvB,OACK,GAAIgC,IAAiBD,EAAO,GAC/BE,EACF,QAGAD,IAAiBD,IAAOjC,EAAMwB,WAAaW,IAKjD,IAAIG,EAAc,CAAC,MAAQ,EAAM,QAAU,EAAM,UAAY,EAAM,QAAU,EAAM,QAAU,EAAM,MAAQ,EAAM,kBAAkB,GAEnI,SAASC,EAAUC,EAAUC,EAAQrE,EAAMsE,EAAOC,EAAMC,GACtDC,KAAKL,SAAWA,EAChBK,KAAKJ,OAASA,EACdI,KAAKzE,KAAOA,EACZyE,KAAKF,KAAOA,EACZE,KAAKD,KAAOA,EACC,MAATF,IAAeG,KAAKH,MAAQA,GAGlC,SAASI,EAAQ9C,EAAO+C,GACtB,IAAK,IAAIC,EAAIhD,EAAMiD,UAAWD,EAAGA,EAAIA,EAAE7C,KACrC,GAAI6C,EAAEE,MAAQH,EAAS,OAAO,EAChC,IAAK,IAAII,EAAKnD,EAAMoD,QAASD,EAAIA,EAAKA,EAAGR,KACvC,IAASK,EAAIG,EAAGE,KAAML,EAAGA,EAAIA,EAAE7C,KAC7B,GAAI6C,EAAEE,MAAQH,EAAS,OAAO,EA2BpC,IAAII,EAAK,CAACnD,MAAO,KAAMyC,OAAQ,KAAMa,OAAQ,KAAMC,GAAI,MACvD,SAASC,IACP,IAAK,IAAIC,EAAIC,UAAUC,OAAS,EAAGF,GAAK,EAAGA,IAAKN,EAAGI,GAAGK,KAAKF,UAAUD,IAEvE,SAAS5D,IAEP,OADA2D,EAAKK,MAAM,KAAMH,YACV,EAET,SAASI,EAASf,GAChB,SAASgB,EAAOC,GACd,IAAK,IAAIhB,EAAIgB,EAAMhB,EAAGA,EAAIA,EAAE7C,KAC1B,GAAI6C,EAAEE,MAAQH,EAAS,OAAO,EAChC,OAAO,EAET,IAAI/C,EAAQmD,EAAGnD,MAEf,GADAmD,EAAGG,OAAS,MACRtD,EAAMoD,QAAS,CACjB,GAAIW,EAAO/D,EAAMiD,WAAY,OAC7BjD,EAAMiD,UAAY,CAACC,KAAMH,EAAS5C,KAAMH,EAAMiD,eACzC,CACL,GAAIc,EAAO/D,EAAMiE,YAAa,OAC1B9F,EAAa8F,aACfjE,EAAMiE,WAAa,CAACf,KAAMH,EAAS5C,KAAMH,EAAMiE,cAIrD,SAASC,EAAWhB,GAClB,MAAe,UAARA,GAA4B,WAARA,GAA6B,aAARA,GAA+B,YAARA,GAA8B,YAARA,EAK/F,IAAIiB,EAAc,CAACjB,KAAM,OAAQ/C,KAAM,CAAC+C,KAAM,cAC9C,SAASkB,IACPjB,EAAGnD,MAAMoD,QAAU,CAACT,KAAMQ,EAAGnD,MAAMoD,QAASC,KAAMF,EAAGnD,MAAMiD,WAC3DE,EAAGnD,MAAMiD,UAAYkB,EAEvB,SAASE,IACPlB,EAAGnD,MAAMiD,UAAYE,EAAGnD,MAAMoD,QAAQC,KACtCF,EAAGnD,MAAMoD,QAAUD,EAAGnD,MAAMoD,QAAQT,KAEtC,SAAS2B,EAAQlG,EAAMwE,GACrB,IAAI2B,EAAS,WACX,IAAIvE,EAAQmD,EAAGnD,MAAOwE,EAASxE,EAAMwC,SACrC,GAA0B,QAAtBxC,EAAMkB,QAAQ9C,KAAgBoG,EAASxE,EAAMkB,QAAQsB,cACpD,IAAK,IAAIiC,EAAQzE,EAAMkB,QAASuD,GAAuB,KAAdA,EAAMrG,MAAeqG,EAAM/B,MAAO+B,EAAQA,EAAM9B,KAC5F6B,EAASC,EAAMjC,SACjBxC,EAAMkB,QAAU,IAAIqB,EAAUiC,EAAQrB,EAAGpD,OAAO0C,SAAUrE,EAAM,KAAM4B,EAAMkB,QAAS0B,IAGvF,OADA2B,EAAOG,KAAM,EACNH,EAET,SAASI,IACP,IAAI3E,EAAQmD,EAAGnD,MACXA,EAAMkB,QAAQyB,OACU,KAAtB3C,EAAMkB,QAAQ9C,OAChB4B,EAAMwC,SAAWxC,EAAMkB,QAAQsB,UACjCxC,EAAMkB,QAAUlB,EAAMkB,QAAQyB,MAKlC,SAASiC,EAAOC,GAMd,OALA,SAASC,EAAI1G,GACX,OAAIA,GAAQyG,EAAehF,IACR,KAAVgF,EAAsBrB,IACnB3D,EAAKiF,IAKrB,SAASC,EAAU3G,EAAM4G,GACvB,MAAY,OAAR5G,EAAsByB,EAAKyE,EAAQ,SAAUU,EAAMrB,QAASsB,GAAQL,EAAO,KAAMD,GACzE,aAARvG,EAA4ByB,EAAKyE,EAAQ,QAASY,EAAWH,EAAWJ,GAChE,aAARvG,EAA4ByB,EAAKyE,EAAQ,QAASS,EAAWJ,GACrD,aAARvG,EAA4B+E,EAAGpD,OAAOQ,MAAM,SAAS,GAASV,IAASA,EAAKyE,EAAQ,QAASa,EAAiBP,EAAO,KAAMD,GACnH,YAARvG,EAA2ByB,EAAK+E,EAAO,MAC/B,KAARxG,EAAoByB,EAAKyE,EAAQ,KAAMc,GAAOT,GACtC,KAARvG,EAAoByB,IACZ,MAARzB,GAC2B,QAAzB+E,EAAGnD,MAAMkB,QAAQ0B,MAAkBO,EAAGnD,MAAMuD,GAAGJ,EAAGnD,MAAMuD,GAAGI,OAAS,IAAMgB,GAC5ExB,EAAGnD,MAAMuD,GAAG8B,KAAZlC,GACKtD,EAAKyE,EAAQ,QAASY,EAAWH,EAAWJ,EAAQW,KAEjD,YAARlH,EAA2ByB,EAAK0F,IACxB,OAARnH,EAAsByB,EAAKyE,EAAQ,QAASkB,GAAST,EAAWJ,GACxD,SAARvG,GAAoBQ,GAAiB,aAAToG,GAAyB7B,EAAGG,OAAS,UAAkBzD,EAAKyE,EAAQ,QAASmB,GAAWd,IAC5G,YAARvG,EACEQ,GAAiB,WAAToG,GACV7B,EAAGG,OAAS,UACLzD,EAAKkF,IACHnG,IAAkB,UAAToG,GAA8B,QAATA,GAA4B,QAATA,IAAoB7B,EAAGpD,OAAOQ,MAAM,UAAU,IACxG4C,EAAGG,OAAS,UACC,QAAT0B,EAAwBnF,EAAK6F,IACf,QAATV,EAAwBnF,EAAK8F,GAAUf,EAAO,YAAae,GAAUf,EAAO,MACzE/E,EAAKyE,EAAQ,QAASsB,GAAShB,EAAO,KAAMN,EAAQ,KAAMc,GAAOT,EAAQA,IAC5E/F,GAAiB,aAAToG,GACjB7B,EAAGG,OAAS,UACLzD,EAAKyE,EAAQ,QAASuB,EAAYT,GAAOT,IAEzC9E,EAAKyE,EAAQ,QAASwB,GAGrB,UAAR1H,EAAyByB,EAAKyE,EAAQ,QAASY,EAAWN,EAAO,KAAMN,EAAQ,IAAK,UACtDc,GAAOT,EAAQA,GACrC,QAARvG,EAAuByB,EAAKgG,EAAYjB,EAAO,MACvC,WAARxG,EAA0ByB,EAAK+E,EAAO,MAC9B,SAARxG,EAAwByB,EAAKyE,EAAQ,QAASF,EAAaQ,EAAO,KAAMmB,GAAQnB,EAAO,KAC1DG,EAAWJ,EAAQN,GACxC,UAARjG,EAAyByB,EAAKyE,EAAQ,QAAS0B,GAAarB,GACpD,UAARvG,EAAyByB,EAAKyE,EAAQ,QAAS2B,GAAatB,GACpD,SAARvG,EAAwByB,EAAKkF,GACpB,KAATC,EAAqBnF,EAAKgG,EAAYd,GACnCvB,EAAKc,EAAQ,QAASuB,EAAYjB,EAAO,KAAMD,GAExD,SAASkB,EAAWzH,EAAM4G,GACxB,OAAOkB,EAAgB9H,EAAM4G,GAAO,GAEtC,SAASmB,EAAkB/H,EAAM4G,GAC/B,OAAOkB,EAAgB9H,EAAM4G,GAAO,GAEtC,SAASE,EAAU9G,GACjB,MAAY,KAARA,EAAoBoF,IACjB3D,EAAKyE,EAAQ,KAAMuB,EAAYjB,EAAO,KAAMD,GAErD,SAASuB,EAAgB9H,EAAM4G,EAAOoB,GACpC,GAAIjD,EAAGnD,MAAMwB,YAAc2B,EAAGpD,OAAO6B,MAAO,CAC1C,IAAIyE,EAAOD,EAAUE,EAAmBC,EACxC,GAAY,KAARnI,EAAa,OAAOyB,EAAKuE,EAAaE,EAAQ,KAAMkC,EAAST,GAAQ,KAAMpB,EAAQC,EAAO,MAAOyB,EAAMhC,GACtG,GAAY,YAARjG,EAAoB,OAAOoF,EAAKY,EAAawB,GAAShB,EAAO,MAAOyB,EAAMhC,GAGrF,IAAIoC,EAAUL,EAAUM,EAAuBC,EAC/C,OAAIrE,EAAYsE,eAAexI,GAAcyB,EAAK4G,GACtC,YAARrI,EAA2ByB,EAAK0F,GAAakB,GACrC,SAARrI,GAAoBQ,GAAiB,aAAToG,GAAyB7B,EAAGG,OAAS,UAAkBzD,EAAKyE,EAAQ,QAASuC,GAAiBlC,IAClH,aAARvG,GAA+B,SAARA,EAAwByB,EAAKuG,EAAUD,EAAoBN,GAC1E,KAARzH,EAAoByB,EAAKyE,EAAQ,KAAMa,EAAiBP,EAAO,KAAMD,EAAQ8B,GACrE,YAARrI,GAA8B,UAARA,EAAyByB,EAAKuG,EAAUD,EAAoBN,GAC1E,KAARzH,EAAoByB,EAAKyE,EAAQ,KAAMwC,GAAcnC,EAAQ8B,GACrD,KAARrI,EAAoB2I,EAAaC,EAAS,IAAK,KAAMP,GAC7C,SAARrI,EAAwBoF,EAAKyD,EAAOR,GAC5B,OAARrI,EAAsByB,EAwD5B,SAAqBuG,GACnB,OAAO,SAAShI,GACd,MAAY,KAARA,EAAoByB,EAAKuG,EAAUc,EAAgBC,GACtC,YAAR/I,GAAsBQ,EAAaiB,EAAKuH,GAAehB,EAAUM,EAAuBC,GACrFnD,EAAK4C,EAAUD,EAAoBN,IA5DlBwB,CAAYjB,IAC/B,UAARhI,EAAyByB,EAAKgG,GAC3BhG,IAET,SAASsF,EAAgB/G,GACvB,OAAIA,EAAKmC,MAAM,cAAsBiD,IAC9BA,EAAKqC,GAGd,SAASc,EAAmBvI,EAAM4G,GAChC,MAAY,KAAR5G,EAAoByB,EAAKgG,GACtBa,EAAqBtI,EAAM4G,GAAO,GAE3C,SAAS0B,EAAqBtI,EAAM4G,EAAOoB,GACzC,IAAIkB,EAAgB,GAAXlB,EAAmBO,EAAqBD,EAC7Ca,EAAkB,GAAXnB,EAAmBP,EAAaM,EAC3C,MAAY,MAAR/H,EAAqByB,EAAKuE,EAAagC,EAAUE,EAAmBC,EAAWlC,GACvE,YAARjG,EACE,UAAUoC,KAAKwE,IAAUpG,GAAiB,KAAToG,EAAqBnF,EAAKyH,GAC3D1I,GAAiB,KAAToG,GAAgB7B,EAAGpD,OAAOQ,MAAM,wBAAwB,GAC3DV,EAAKyE,EAAQ,KAAMkC,EAASb,GAAU,KAAMhB,EAAQ2C,GAChD,KAATtC,EAAqBnF,EAAKgG,EAAYjB,EAAO,KAAM2C,GAChD1H,EAAK0H,GAEF,SAARnJ,EAA0BoF,EAAKyD,EAAOK,GAC9B,KAARlJ,EACQ,KAARA,EAAoB2I,EAAaZ,EAAmB,IAAK,OAAQmB,GACzD,KAARlJ,EAAoByB,EAAK2H,EAAUF,GAC3B,KAARlJ,EAAoByB,EAAKyE,EAAQ,KAAMa,EAAiBP,EAAO,KAAMD,EAAQ2C,GAC7E1I,GAAiB,MAAToG,GAAiB7B,EAAGG,OAAS,UAAkBzD,EAAK8F,GAAU2B,IAC9D,UAARlJ,GACF+E,EAAGnD,MAAMoB,SAAW+B,EAAGG,OAAS,WAChCH,EAAGpD,OAAO0H,OAAOtE,EAAGpD,OAAOoC,IAAMgB,EAAGpD,OAAO6B,MAAQ,GAC5C/B,EAAK0H,SAHd,OALA,EAWF,SAASN,EAAM7I,EAAM4G,GACnB,MAAY,SAAR5G,EAAwBoF,IACS,MAAjCwB,EAAMjD,MAAMiD,EAAMrB,OAAS,GAAmB9D,EAAKoH,GAChDpH,EAAKgG,EAAY6B,GAE1B,SAASA,EAActJ,GACrB,GAAY,KAARA,EAGF,OAFA+E,EAAGG,OAAS,WACZH,EAAGnD,MAAMI,SAAWa,EACbpB,EAAKoH,GAGhB,SAASV,EAAUnI,GAEjB,OADAmD,EAAa4B,EAAGpD,OAAQoD,EAAGnD,OACpBwD,EAAa,KAARpF,EAAc2G,EAAYc,GAExC,SAASS,EAAiBlI,GAExB,OADAmD,EAAa4B,EAAGpD,OAAQoD,EAAGnD,OACpBwD,EAAa,KAARpF,EAAc2G,EAAYoB,GASxC,SAASgB,EAAOQ,EAAG3C,GACjB,GAAa,UAATA,EAA4C,OAAvB7B,EAAGG,OAAS,UAAkBzD,EAAK8G,GAE9D,SAASO,EAAcS,EAAG3C,GACxB,GAAa,UAATA,EAA4C,OAAvB7B,EAAGG,OAAS,UAAkBzD,EAAK6G,GAE9D,SAASZ,EAAW1H,GAClB,MAAY,KAARA,EAAoByB,EAAK8E,EAAQI,GAC9BvB,EAAKmD,EAAoB/B,EAAO,KAAMD,GAE/C,SAAS6C,EAASpJ,GAChB,GAAY,YAARA,EAA6C,OAAxB+E,EAAGG,OAAS,WAAmBzD,IAE1D,SAASmH,EAAQ5I,EAAM4G,GACrB,MAAY,SAAR5G,GACF+E,EAAGG,OAAS,WACLzD,EAAKmH,IACK,YAAR5I,GAAkC,WAAZ+E,EAAGjE,OAClCiE,EAAGG,OAAS,WACC,OAAT0B,GAA2B,OAATA,EAAuBnF,EAAK+H,IAE9ChJ,GAAQuE,EAAGnD,MAAMwB,YAAc2B,EAAGpD,OAAO6B,QAAUC,EAAIsB,EAAGpD,OAAOQ,MAAM,YAAY,MACrF4C,EAAGnD,MAAMwB,WAAa2B,EAAGpD,OAAOoC,IAAMN,EAAE,GAAG8B,QACtC9D,EAAKgI,KACK,UAARzJ,GAA4B,UAARA,GAC7B+E,EAAGG,OAAS9E,EAAa,WAAc2E,EAAGjE,MAAQ,YAC3CW,EAAKgI,IACK,kBAARzJ,EACFyB,EAAKgI,GACHjJ,GAAQsF,EAAWc,IAC5B7B,EAAGG,OAAS,UACLzD,EAAKmH,IACK,KAAR5I,EACFyB,EAAKgG,EAAYiC,GAAWlD,EAAO,KAAMiD,GAC/B,UAARzJ,EACFyB,EAAKsG,EAAmB0B,GACb,KAAT7C,GACT7B,EAAGG,OAAS,UACLzD,EAAKmH,IACK,KAAR5I,EACFoF,EAAKqE,QADP,EAnBL,IAAIhG,EAuBR,SAAS+F,EAAaxJ,GACpB,MAAY,YAARA,EAA2BoF,EAAKqE,IACpC1E,EAAGG,OAAS,WACLzD,EAAK0F,KAEd,SAASsC,EAAUzJ,GACjB,MAAY,KAARA,EAAoByB,EAAKsG,GACjB,KAAR/H,EAAoBoF,EAAK+B,SAA7B,EAEF,SAASiB,EAASuB,EAAMC,EAAKC,GAC3B,SAASC,EAAQ9J,EAAM4G,GACrB,GAAIiD,EAAMA,EAAItG,QAAQvD,IAAS,EAAY,KAARA,EAAa,CAC9C,IAAIsG,EAAMvB,EAAGnD,MAAMkB,QAEnB,MADgB,QAAZwD,EAAI9B,OAAgB8B,EAAIvC,KAAOuC,EAAIvC,KAAO,GAAK,GAC5CtC,GAAK,SAASzB,EAAM4G,GACzB,OAAI5G,GAAQ4J,GAAOhD,GAASgD,EAAYxE,IACjCA,EAAKuE,KACXG,GAEL,OAAI9J,GAAQ4J,GAAOhD,GAASgD,EAAYnI,IACjCA,EAAK+E,EAAOoD,IAErB,OAAO,SAAS5J,EAAM4G,GACpB,OAAI5G,GAAQ4J,GAAOhD,GAASgD,EAAYnI,IACjC2D,EAAKuE,EAAMG,IAGtB,SAASnB,EAAagB,EAAMC,EAAKpF,GAC/B,IAAK,IAAIa,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IACpCN,EAAGI,GAAGK,KAAKF,UAAUD,IACvB,OAAO5D,EAAKyE,EAAQ0D,EAAKpF,GAAO4D,EAASuB,EAAMC,GAAMrD,GAEvD,SAASS,GAAMhH,GACb,MAAY,KAARA,EAAoByB,IACjB2D,EAAKuB,EAAWK,IAEzB,SAAS0C,GAAU1J,EAAM4G,GACvB,GAAIpG,EAAM,CACR,GAAY,KAARR,EAAa,OAAOyB,EAAK8F,IAC7B,GAAa,KAATX,EAAc,OAAOnF,EAAKiI,KAGlC,SAASK,GAAa/J,GACpB,GAAIQ,GAAgB,KAARR,EACV,OAAI+E,EAAGpD,OAAOQ,MAAM,kBAAkB,GAAeV,EAAKgG,EAAYuC,GAAMzC,IAChE9F,EAAK8F,IAGrB,SAASyC,GAAKT,EAAG3C,GACf,GAAa,MAATA,EAEF,OADA7B,EAAGG,OAAS,UACLzD,IAGX,SAAS8F,GAASvH,EAAM4G,GACtB,MAAa,SAATA,GAA6B,UAATA,GACtB7B,EAAGG,OAAS,UACLzD,EAAc,SAATmF,EAAmBW,GAAWE,IAEhC,YAARzH,GAA+B,QAAT4G,GACxB7B,EAAGG,OAAS,OACLzD,EAAKwI,KAEF,UAARjK,GAA4B,UAARA,GAA4B,QAARA,EAAuByB,EAAKwI,IAC5D,KAARjK,EAAoByB,EAAKyE,EAAQ,KAAMkC,EAASb,GAAU,IAAK,KAAMhB,EAAQ0D,IACrE,KAARjK,EAAoByB,EAAKyE,EAAQ,KAAMkC,EAAS8B,GAAU,IAAK,MAAO3D,EAAQ0D,IACtE,KAARjK,EAAoByB,EAAK2G,EAAS+B,GAAS,KAAMC,SAArD,EAEF,SAASA,GAAgBpK,GACvB,GAAY,MAARA,EAAc,OAAOyB,EAAK8F,IAEhC,SAAS2C,GAASlK,EAAM4G,GACtB,MAAY,YAAR5G,GAAkC,WAAZ+E,EAAGjE,OAC3BiE,EAAGG,OAAS,WACLzD,EAAKyI,KACM,KAATtD,EACFnF,EAAKyI,IACK,KAARlK,EACFyB,EAAK8F,IACK,KAARvH,EACFyB,EAAKgG,EAAYiC,GAAWlD,EAAO,KAAM0D,SAD3C,EAIT,SAASC,GAAQnK,GACf,MAAY,YAARA,EAA2ByB,EAAK0I,IACnB,KAARnK,EAAoByB,EAAK8F,SAA7B,EAEP,SAAS0C,GAAUjK,EAAM4G,GACvB,MAAa,KAATA,EAAqBnF,EAAKyE,EAAQ,KAAMkC,EAASb,GAAU,KAAMhB,EAAQ0D,IAChE,KAATrD,GAAwB,KAAR5G,GAAwB,KAAT4G,EAAqBnF,EAAK8F,IACjD,KAARvH,EAAoByB,EAAK+E,EAAO,KAAMyD,IAC7B,WAATrD,GAA+B,cAATA,GAAyB7B,EAAGG,OAAS,UAAkBzD,EAAK8F,UAAtF,EAEF,SAASyB,GAAcO,EAAG3C,GACxB,GAAa,KAATA,EAAc,OAAOnF,EAAKyE,EAAQ,KAAMkC,EAASb,GAAU,KAAMhB,EAAQ0D,IAE/E,SAASI,KACP,OAAOjF,EAAKmC,GAAU+C,IAExB,SAASA,GAAiBf,EAAG3C,GAC3B,GAAa,KAATA,EAAc,OAAOnF,EAAK8F,IAEhC,SAASV,GAAO0C,EAAG3C,GACjB,MAAa,QAATA,GAAkB7B,EAAGG,OAAS,UAAkBzD,EAAK6F,KAClDlC,EAAKoC,GAASkC,GAAWa,GAAaC,IAE/C,SAAShD,GAAQxH,EAAM4G,GACrB,OAAIpG,GAAQsF,EAAWc,IAAU7B,EAAGG,OAAS,UAAkBzD,EAAK+F,KACxD,YAARxH,GAAsB0F,EAASkB,GAAenF,KACtC,UAARzB,EAAyByB,EAAK+F,IACtB,KAARxH,EAAoB2I,EAAanB,GAAS,KAClC,KAARxH,EAAoB2I,EAAa8B,GAAa,UAAlD,EAEF,SAASA,GAAYzK,EAAM4G,GACzB,MAAY,YAAR5G,GAAuB+E,EAAGpD,OAAOQ,MAAM,SAAS,IAIxC,YAARnC,IAAoB+E,EAAGG,OAAS,YACxB,UAARlF,EAAyByB,EAAK+F,IACtB,KAARxH,EAAoBoF,IACjB3D,EAAK+E,EAAO,KAAMgB,GAAS+C,MANhC7E,EAASkB,GACFnF,EAAK8I,KAOhB,SAASA,GAAYG,EAAO9D,GAC1B,GAAa,KAATA,EAAc,OAAOnF,EAAKsG,GAEhC,SAASyC,GAAWxK,GAClB,GAAY,KAARA,EAAa,OAAOyB,EAAKoF,IAE/B,SAASK,GAAUlH,EAAM4G,GACvB,GAAY,aAAR5G,GAAgC,QAAT4G,EAAiB,OAAOnF,EAAKyE,EAAQ,OAAQ,QAASS,EAAWJ,GAE9F,SAASa,GAAQpH,EAAM4G,GACrB,MAAa,SAATA,EAAyBnF,EAAK2F,IACtB,KAARpH,EAAoByB,EAAKyE,EAAQ,KAAMyE,GAAUnE,EAAO,KAAMD,QAAlE,EAEF,SAASoE,GAAS3K,GAChB,MAAY,OAARA,EAAsByB,EAAKoF,GAAQL,EAAO,KAAMoE,IACxC,KAAR5K,EAAoByB,EAAKmJ,IACjB,YAAR5K,EAA2ByB,EAAKoJ,IAC7BzF,EAAKqC,EAAYjB,EAAO,KAAMoE,IAEvC,SAASC,GAAaH,EAAO9D,GAC3B,MAAa,MAATA,GAA0B,MAATA,GAAiB7B,EAAGG,OAAS,UAAkBzD,EAAKgG,IAClEhG,EAAK8G,EAAoBqC,IAElC,SAASA,GAAS5K,EAAM4G,GACtB,MAAY,KAAR5G,EAAoByB,EAAKqJ,IAChB,MAATlE,GAA0B,MAATA,GAAiB7B,EAAGG,OAAS,UAAkBzD,EAAKgG,IAClErC,EAAKqC,EAAYjB,EAAO,KAAMsE,IAEvC,SAASA,GAAS9K,GACJ,KAARA,GAAayB,EAAKgG,GAExB,SAASN,GAAYnH,EAAM4G,GACzB,MAAa,KAATA,GAAe7B,EAAGG,OAAS,UAAkBzD,EAAK0F,KAC1C,YAARnH,GAAqB0F,EAASkB,GAAenF,EAAK0F,KAC1C,KAARnH,EAAoByB,EAAKuE,EAAaE,EAAQ,KAAMkC,EAAST,GAAQ,KAAMpB,EAAQwD,GAAcpD,EAAWV,GAC5GzF,GAAiB,KAAToG,EAAqBnF,EAAKyE,EAAQ,KAAMkC,EAASiC,GAAW,KAAM9D,EAAQY,SAAtF,EAEF,SAASQ,GAAO3H,EAAM4G,GAEpB,MADa,KAATA,GAAcnF,EAAKgG,EAAYE,IACvB,UAAR3H,EAAyByB,EAAKkG,IAC9BnH,GAAQsF,EAAWc,IAAU7B,EAAGG,OAAS,UAAkBzD,EAAKkG,KAC7DvC,EAAKoC,GAASkC,GAAWa,IAElC,SAAS9B,GAAgBzI,EAAM4G,GAE7B,MAAY,YAAR5G,EAA2BqH,GAAUrH,EAAM4G,GACxCmE,GAAe/K,EAAM4G,GAE9B,SAASS,GAAUrH,EAAM4G,GACvB,GAAY,YAAR5G,EAAsC,OAAjB0F,EAASkB,GAAenF,EAAKsJ,IAExD,SAASA,GAAe/K,EAAM4G,GAC5B,MAAa,KAATA,EAAqBnF,EAAKyE,EAAQ,KAAMkC,EAASiC,GAAW,KAAM9D,EAAQwE,IACjE,WAATnE,GAA+B,cAATA,GAA0BpG,GAAgB,KAARR,GAC7C,cAAT4G,IAAuB7B,EAAGG,OAAS,WAChCzD,EAAKjB,EAAO+G,GAAWE,EAAYsD,KAEhC,KAAR/K,EAAoByB,EAAKyE,EAAQ,KAAM8E,GAAWzE,QAAtD,EAEF,SAASyE,GAAUhL,EAAM4G,GACvB,MAAY,SAAR5G,GACS,YAARA,IACU,UAAT4G,GAA8B,OAATA,GAA2B,OAATA,GAAmBpG,GAAQsF,EAAWc,KAC9E7B,EAAGpD,OAAOQ,MAAM,wBAAwB,IAC3C4C,EAAGG,OAAS,UACLzD,EAAKuJ,KAEF,YAARhL,GAAkC,WAAZ+E,EAAGjE,OAC3BiE,EAAGG,OAAS,WACLzD,EAAKjB,EAAOyK,GAAa9D,GAAa6D,KAEnC,KAARhL,EACKyB,EAAKgG,EAAYiC,GAAWlD,EAAO,KAAMhG,EAAOyK,GAAa9D,GAAa6D,IACtE,KAATpE,GACF7B,EAAGG,OAAS,UACLzD,EAAKuJ,KAEF,KAARhL,EAAoByB,EAAKuJ,IACjB,KAARhL,EAAoByB,IACX,KAATmF,EAAqBnF,EAAKgG,EAAYuD,SAA1C,EAEF,SAASC,GAAWjL,EAAM4G,GACxB,MAAa,KAATA,EAAqBnF,EAAKwJ,IAClB,KAARjL,EAAoByB,EAAK8F,GAAUgD,IAC1B,KAAT3D,EAAqBnF,EAAKsG,GACvB3C,EAAK+B,IAEd,SAASS,GAAY5H,EAAM4G,GACzB,MAAa,KAATA,GAAgB7B,EAAGG,OAAS,UAAkBzD,EAAKyJ,GAAW1E,EAAO,OAC5D,WAATI,GAAsB7B,EAAGG,OAAS,UAAkBzD,EAAKgG,EAAYjB,EAAO,OACpE,KAARxG,EAAoByB,EAAK2G,EAAS+C,GAAa,KAAMD,GAAW1E,EAAO,MACpEpB,EAAKuB,GAEd,SAASwE,GAAYnL,EAAM4G,GACzB,MAAa,MAATA,GAAiB7B,EAAGG,OAAS,UAAkBzD,EAAK+E,EAAO,cACnD,YAARxG,EAA2BoF,EAAK2C,EAAmBoD,SAAvD,EAEF,SAAStD,GAAY7H,GACnB,MAAY,UAARA,EAAyByB,IACjB,KAARzB,EAAoBoF,EAAKqC,GACtBrC,EAAKgG,GAAYC,GAAkBH,IAE5C,SAASE,GAAWpL,EAAM4G,GACxB,MAAY,KAAR5G,EAAoB2I,EAAayC,GAAY,MACrC,YAARpL,GAAoB0F,EAASkB,GACpB,KAATA,IAAc7B,EAAGG,OAAS,WACvBzD,EAAK6J,KAEd,SAASD,GAAiBrL,GACxB,GAAY,KAARA,EAAa,OAAOyB,EAAK2J,GAAYC,IAE3C,SAASC,GAAQZ,EAAO9D,GACtB,GAAa,MAATA,EAAwC,OAAvB7B,EAAGG,OAAS,UAAkBzD,EAAK2J,IAE1D,SAASF,GAAUR,EAAO9D,GACxB,GAAa,QAATA,EAA0C,OAAvB7B,EAAGG,OAAS,UAAkBzD,EAAKgG,GAE5D,SAASiB,GAAa1I,GACpB,MAAY,KAARA,EAAoByB,IACjB2D,EAAKgD,EAASL,EAAmB,MAE1C,SAAST,KACP,OAAOlC,EAAKc,EAAQ,QAASsB,GAAShB,EAAO,KAAMN,EAAQ,KAAMkC,EAASmD,GAAY,KAAMhF,EAAQA,GAEtG,SAASgF,KACP,OAAOnG,EAAKoC,GAAS+C,IASvB,SAAS9H,GAAkBd,EAAQC,EAAOyH,GACxC,OAAOzH,EAAMI,UAAYN,GACvB,iFAAiFU,KAAKR,EAAMoB,WACzE,SAAlBpB,EAAMoB,UAAuB,SAASZ,KAAKT,EAAO2B,OAAOK,MAAM,EAAGhC,EAAOoC,KAAOsF,GAAU,KAK/F,OArcA9C,EAAOD,KAAM,EAqcN,CACLkF,WAAY,SAASC,GACnB,IAAI7J,EAAQ,CACVI,SAAUN,EACVsB,SAAU,MACVmC,GAAI,GACJrC,QAAS,IAAIqB,GAAWsH,GAAc,GAAKvL,EAAY,EAAG,SAAS,GACnE2E,UAAW9E,EAAa8E,UACxBG,QAASjF,EAAa8E,WAAa,CAACI,KAAMlF,EAAa8E,WACvDT,SAAUqH,GAAc,GAI1B,OAFI1L,EAAa8F,YAAgD,iBAA3B9F,EAAa8F,aACjDjE,EAAMiE,WAAa9F,EAAa8F,YAC3BjE,GAGT8J,MAAO,SAAS/J,EAAQC,GAOtB,GANID,EAAOgK,QACJ/J,EAAMkB,QAAQ0F,eAAe,WAChC5G,EAAMkB,QAAQwB,OAAQ,GACxB1C,EAAMwC,SAAWzC,EAAOiK,cACxBzI,EAAaxB,EAAQC,IAEnBA,EAAMI,UAAYO,GAAgBZ,EAAOkK,WAAY,OAAO,KAChE,IAAI/K,EAAQc,EAAMI,SAASL,EAAQC,GACnC,MAAY,WAAR5B,EAA0Bc,GAC9Bc,EAAMoB,SAAmB,YAARhD,GAAkC,MAAXC,GAA8B,MAAXA,EAA8BD,EAAX,SAljBlF,SAAiB4B,EAAOd,EAAOd,EAAMC,EAAS0B,GAC5C,IAAIwD,EAAKvD,EAAMuD,GAQf,IALAJ,EAAGnD,MAAQA,EAAOmD,EAAGpD,OAASA,EAAQoD,EAAGG,OAAS,KAAMH,EAAGI,GAAKA,EAAIJ,EAAGjE,MAAQA,EAE1Ec,EAAMkB,QAAQ0F,eAAe,WAChC5G,EAAMkB,QAAQwB,OAAQ,KAItB,IADiBa,EAAGI,OAASJ,EAAG8B,MAAQ3G,EAAWmH,EAAad,GACjD3G,EAAMC,GAAU,CAC7B,KAAMkF,EAAGI,QAAUJ,EAAGA,EAAGI,OAAS,GAAGe,KACnCnB,EAAG8B,KAAH9B,GACF,OAAIJ,EAAGG,OAAeH,EAAGG,OACb,YAARlF,GAAsB0E,EAAQ9C,EAAO3B,GAAiB,aACnDa,GAmiBFgL,CAAQlK,EAAOd,EAAOd,EAAMC,EAAS0B,KAG9CyE,OAAQ,SAASxE,EAAOmK,GACtB,GAAInK,EAAMI,UAAYO,EAAc,OAAO3C,EAAWoM,KACtD,GAAIpK,EAAMI,UAAYN,EAAW,OAAO,EACxC,IAA2EuK,EAAvEC,EAAYH,GAAaA,EAAU/H,OAAO,GAAIlB,EAAUlB,EAAMkB,QAElE,IAAK,aAAaV,KAAK2J,GAAY,IAAK,IAAI1G,EAAIzD,EAAMuD,GAAGI,OAAS,EAAGF,GAAK,IAAKA,EAAG,CAChF,IAAI8G,EAAIvK,EAAMuD,GAAGE,GACjB,GAAI8G,GAAK5F,EAAQzD,EAAUA,EAAQyB,UAC9B,GAAI4H,GAAKjF,GAAW,MAE3B,MAAwB,QAAhBpE,EAAQ9C,MAAkC,QAAhB8C,EAAQ9C,QACrB,KAAbkM,IAAsBD,EAAMrK,EAAMuD,GAAGvD,EAAMuD,GAAGI,OAAS,MACjC0G,GAAO1D,GAAsB0D,GAAO3D,KACpC,mBAAmBlG,KAAK2J,KACpDjJ,EAAUA,EAAQyB,KAChBpE,GAAmC,KAAhB2C,EAAQ9C,MAAoC,QAArB8C,EAAQyB,KAAKvE,OACzD8C,EAAUA,EAAQyB,MACpB,IAAIvE,EAAO8C,EAAQ9C,KAAMoM,EAAUF,GAAalM,EAEhD,MAAY,UAARA,EAAyB8C,EAAQsB,UAA8B,YAAlBxC,EAAMoB,UAA4C,KAAlBpB,EAAMoB,SAAkBF,EAAQ0B,KAAO,EAAI,GAC3G,QAARxE,GAA+B,KAAbkM,EAAyBpJ,EAAQsB,SAC3C,QAARpE,EAAuB8C,EAAQsB,SAAWlE,EAClC,QAARF,EACA8C,EAAQsB,UAnErB,SAA8BxC,EAAOmK,GACnC,MAAyB,YAAlBnK,EAAMoB,UAA4C,KAAlBpB,EAAMoB,UAC3C3B,EAAee,KAAK2J,EAAU/H,OAAO,KACrC,OAAO5B,KAAK2J,EAAU/H,OAAO,IAgEAqI,CAAqBzK,EAAOmK,GAAa5L,GAAmBD,EAAa,GAC7E,UAAhB4C,EAAQ0B,MAAqB4H,GAA8C,GAAnCrM,EAAauM,mBAErDxJ,EAAQwB,MAAcxB,EAAQuB,QAAU+H,EAAU,EAAI,GACnDtJ,EAAQsB,UAAYgI,EAAU,EAAIlM,GAFrC4C,EAAQsB,UAAY,sBAAsBhC,KAAK2J,GAAa7L,EAAa,EAAIA,IAKxFqM,cAAe,oCACfC,kBAAmBlM,EAAW,KAAO,KACrCmM,gBAAiBnM,EAAW,KAAO,KACnCoM,qBAAsBpM,EAAW,KAAO,MACxCqM,YAAarM,EAAW,KAAO,KAC/BsM,KAAM,QACNC,cAAe,iBAEfC,WAAYxM,EAAW,OAAS,aAChCF,WAAYA,EACZE,SAAUA,EAEVmC,kBAAmBA,GAEnBsK,eAAgB,SAASnL,GACvB,IAAIqK,EAAMrK,EAAMuD,GAAGvD,EAAMuD,GAAGI,OAAS,GACjC0G,GAAOxE,GAAcwE,GAAOlE,GAAmBnG,EAAMuD,GAAG8B,WAKlErH,EAAWoN,eAAe,YAAa,aAAc,SAErDpN,EAAWqN,WAAW,kBAAmB,cACzCrN,EAAWqN,WAAW,kBAAmB,cACzCrN,EAAWqN,WAAW,yBAA0B,cAChDrN,EAAWqN,WAAW,2BAA4B,cAClDrN,EAAWqN,WAAW,yBAA0B,cAChDrN,EAAWqN,WAAW,mBAAoB,CAACnI,KAAM,aAAcvE,MAAM,IACrEX,EAAWqN,WAAW,qBAAsB,CAACnI,KAAM,aAAcvE,MAAM,IACvEX,EAAWqN,WAAW,sBAAuB,CAACnI,KAAM,aAAczE,QAAQ,IAC1ET,EAAWqN,WAAW,kBAAmB,CAAEnI,KAAM,aAAcrE,YAAY,IAC3Eb,EAAWqN,WAAW,yBAA0B,CAAEnI,KAAM,aAAcrE,YAAY,IA31B9EyM,CAAI,EAAQ","file":"static/js/1.6255cd43.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"javascript\", function(config, parserConfig) {\n  var indentUnit = config.indentUnit;\n  var statementIndent = parserConfig.statementIndent;\n  var jsonldMode = parserConfig.jsonld;\n  var jsonMode = parserConfig.json || jsonldMode;\n  var isTS = parserConfig.typescript;\n  var wordRE = parserConfig.wordCharacters || /[\\w$\\xa1-\\uffff]/;\n\n  // Tokenizer\n\n  var keywords = function(){\n    function kw(type) {return {type: type, style: \"keyword\"};}\n    var A = kw(\"keyword a\"), B = kw(\"keyword b\"), C = kw(\"keyword c\"), D = kw(\"keyword d\");\n    var operator = kw(\"operator\"), atom = {type: \"atom\", style: \"atom\"};\n\n    return {\n      \"if\": kw(\"if\"), \"while\": A, \"with\": A, \"else\": B, \"do\": B, \"try\": B, \"finally\": B,\n      \"return\": D, \"break\": D, \"continue\": D, \"new\": kw(\"new\"), \"delete\": C, \"void\": C, \"throw\": C,\n      \"debugger\": kw(\"debugger\"), \"var\": kw(\"var\"), \"const\": kw(\"var\"), \"let\": kw(\"var\"),\n      \"function\": kw(\"function\"), \"catch\": kw(\"catch\"),\n      \"for\": kw(\"for\"), \"switch\": kw(\"switch\"), \"case\": kw(\"case\"), \"default\": kw(\"default\"),\n      \"in\": operator, \"typeof\": operator, \"instanceof\": operator,\n      \"true\": atom, \"false\": atom, \"null\": atom, \"undefined\": atom, \"NaN\": atom, \"Infinity\": atom,\n      \"this\": kw(\"this\"), \"class\": kw(\"class\"), \"super\": kw(\"atom\"),\n      \"yield\": C, \"export\": kw(\"export\"), \"import\": kw(\"import\"), \"extends\": C,\n      \"await\": C\n    };\n  }();\n\n  var isOperatorChar = /[+\\-*&%=<>!?|~^@]/;\n  var isJsonldKeyword = /^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)\"/;\n\n  function readRegexp(stream) {\n    var escaped = false, next, inSet = false;\n    while ((next = stream.next()) != null) {\n      if (!escaped) {\n        if (next == \"/\" && !inSet) return;\n        if (next == \"[\") inSet = true;\n        else if (inSet && next == \"]\") inSet = false;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n  }\n\n  // Used as scratch variables to communicate multiple values without\n  // consing up tons of objects.\n  var type, content;\n  function ret(tp, style, cont) {\n    type = tp; content = cont;\n    return style;\n  }\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    } else if (ch == \".\" && stream.match(/^\\d+(?:[eE][+\\-]?\\d+)?/)) {\n      return ret(\"number\", \"number\");\n    } else if (ch == \".\" && stream.match(\"..\")) {\n      return ret(\"spread\", \"meta\");\n    } else if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n      return ret(ch);\n    } else if (ch == \"=\" && stream.eat(\">\")) {\n      return ret(\"=>\", \"operator\");\n    } else if (ch == \"0\" && stream.eat(/x/i)) {\n      stream.eatWhile(/[\\da-f]/i);\n      return ret(\"number\", \"number\");\n    } else if (ch == \"0\" && stream.eat(/o/i)) {\n      stream.eatWhile(/[0-7]/i);\n      return ret(\"number\", \"number\");\n    } else if (ch == \"0\" && stream.eat(/b/i)) {\n      stream.eatWhile(/[01]/i);\n      return ret(\"number\", \"number\");\n    } else if (/\\d/.test(ch)) {\n      stream.match(/^\\d*(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/);\n      return ret(\"number\", \"number\");\n    } else if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      } else if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return ret(\"comment\", \"comment\");\n      } else if (expressionAllowed(stream, state, 1)) {\n        readRegexp(stream);\n        stream.match(/^\\b(([gimyu])(?![gimyu]*\\2))+\\b/);\n        return ret(\"regexp\", \"string-2\");\n      } else {\n        stream.eat(\"=\");\n        return ret(\"operator\", \"operator\", stream.current());\n      }\n    } else if (ch == \"`\") {\n      state.tokenize = tokenQuasi;\n      return tokenQuasi(stream, state);\n    } else if (ch == \"#\") {\n      stream.skipToEnd();\n      return ret(\"error\", \"error\");\n    } else if (isOperatorChar.test(ch)) {\n      if (ch != \">\" || !state.lexical || state.lexical.type != \">\") {\n        if (stream.eat(\"=\")) {\n          if (ch == \"!\" || ch == \"=\") stream.eat(\"=\")\n        } else if (/[<>*+\\-]/.test(ch)) {\n          stream.eat(ch)\n          if (ch == \">\") stream.eat(ch)\n        }\n      }\n      return ret(\"operator\", \"operator\", stream.current());\n    } else if (wordRE.test(ch)) {\n      stream.eatWhile(wordRE);\n      var word = stream.current()\n      if (state.lastType != \".\") {\n        if (keywords.propertyIsEnumerable(word)) {\n          var kw = keywords[word]\n          return ret(kw.type, kw.style, word)\n        }\n        if (word == \"async\" && stream.match(/^(\\s|\\/\\*.*?\\*\\/)*[\\(\\w]/, false))\n          return ret(\"async\", \"keyword\", word)\n      }\n      return ret(\"variable\", \"variable\", word)\n    }\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next;\n      if (jsonldMode && stream.peek() == \"@\" && stream.match(isJsonldKeyword)){\n        state.tokenize = tokenBase;\n        return ret(\"jsonld-keyword\", \"meta\");\n      }\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) break;\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (!escaped) state.tokenize = tokenBase;\n      return ret(\"string\", \"string\");\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return ret(\"comment\", \"comment\");\n  }\n\n  function tokenQuasi(stream, state) {\n    var escaped = false, next;\n    while ((next = stream.next()) != null) {\n      if (!escaped && (next == \"`\" || next == \"$\" && stream.eat(\"{\"))) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    return ret(\"quasi\", \"string-2\", stream.current());\n  }\n\n  var brackets = \"([{}])\";\n  // This is a crude lookahead trick to try and notice that we're\n  // parsing the argument patterns for a fat-arrow function before we\n  // actually hit the arrow token. It only works if the arrow is on\n  // the same line as the arguments and there's no strange noise\n  // (comments) in between. Fallback is to only notice when we hit the\n  // arrow, and not declare the arguments as locals for the arrow\n  // body.\n  function findFatArrow(stream, state) {\n    if (state.fatArrowAt) state.fatArrowAt = null;\n    var arrow = stream.string.indexOf(\"=>\", stream.start);\n    if (arrow < 0) return;\n\n    if (isTS) { // Try to skip TypeScript return type declarations after the arguments\n      var m = /:\\s*(?:\\w+(?:<[^>]*>|\\[\\])?|\\{[^}]*\\})\\s*$/.exec(stream.string.slice(stream.start, arrow))\n      if (m) arrow = m.index\n    }\n\n    var depth = 0, sawSomething = false;\n    for (var pos = arrow - 1; pos >= 0; --pos) {\n      var ch = stream.string.charAt(pos);\n      var bracket = brackets.indexOf(ch);\n      if (bracket >= 0 && bracket < 3) {\n        if (!depth) { ++pos; break; }\n        if (--depth == 0) { if (ch == \"(\") sawSomething = true; break; }\n      } else if (bracket >= 3 && bracket < 6) {\n        ++depth;\n      } else if (wordRE.test(ch)) {\n        sawSomething = true;\n      } else if (/[\"'\\/]/.test(ch)) {\n        return;\n      } else if (sawSomething && !depth) {\n        ++pos;\n        break;\n      }\n    }\n    if (sawSomething && !depth) state.fatArrowAt = pos;\n  }\n\n  // Parser\n\n  var atomicTypes = {\"atom\": true, \"number\": true, \"variable\": true, \"string\": true, \"regexp\": true, \"this\": true, \"jsonld-keyword\": true};\n\n  function JSLexical(indented, column, type, align, prev, info) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.prev = prev;\n    this.info = info;\n    if (align != null) this.align = align;\n  }\n\n  function inScope(state, varname) {\n    for (var v = state.localVars; v; v = v.next)\n      if (v.name == varname) return true;\n    for (var cx = state.context; cx; cx = cx.prev) {\n      for (var v = cx.vars; v; v = v.next)\n        if (v.name == varname) return true;\n    }\n  }\n\n  function parseJS(state, style, type, content, stream) {\n    var cc = state.cc;\n    // Communicate our context to the combinators.\n    // (Less wasteful than consing up a hundred closures on every call.)\n    cx.state = state; cx.stream = stream; cx.marked = null, cx.cc = cc; cx.style = style;\n\n    if (!state.lexical.hasOwnProperty(\"align\"))\n      state.lexical.align = true;\n\n    while(true) {\n      var combinator = cc.length ? cc.pop() : jsonMode ? expression : statement;\n      if (combinator(type, content)) {\n        while(cc.length && cc[cc.length - 1].lex)\n          cc.pop()();\n        if (cx.marked) return cx.marked;\n        if (type == \"variable\" && inScope(state, content)) return \"variable-2\";\n        return style;\n      }\n    }\n  }\n\n  // Combinator utils\n\n  var cx = {state: null, column: null, marked: null, cc: null};\n  function pass() {\n    for (var i = arguments.length - 1; i >= 0; i--) cx.cc.push(arguments[i]);\n  }\n  function cont() {\n    pass.apply(null, arguments);\n    return true;\n  }\n  function register(varname) {\n    function inList(list) {\n      for (var v = list; v; v = v.next)\n        if (v.name == varname) return true;\n      return false;\n    }\n    var state = cx.state;\n    cx.marked = \"def\";\n    if (state.context) {\n      if (inList(state.localVars)) return;\n      state.localVars = {name: varname, next: state.localVars};\n    } else {\n      if (inList(state.globalVars)) return;\n      if (parserConfig.globalVars)\n        state.globalVars = {name: varname, next: state.globalVars};\n    }\n  }\n\n  function isModifier(name) {\n    return name == \"public\" || name == \"private\" || name == \"protected\" || name == \"abstract\" || name == \"readonly\"\n  }\n\n  // Combinators\n\n  var defaultVars = {name: \"this\", next: {name: \"arguments\"}};\n  function pushcontext() {\n    cx.state.context = {prev: cx.state.context, vars: cx.state.localVars};\n    cx.state.localVars = defaultVars;\n  }\n  function popcontext() {\n    cx.state.localVars = cx.state.context.vars;\n    cx.state.context = cx.state.context.prev;\n  }\n  function pushlex(type, info) {\n    var result = function() {\n      var state = cx.state, indent = state.indented;\n      if (state.lexical.type == \"stat\") indent = state.lexical.indented;\n      else for (var outer = state.lexical; outer && outer.type == \")\" && outer.align; outer = outer.prev)\n        indent = outer.indented;\n      state.lexical = new JSLexical(indent, cx.stream.column(), type, null, state.lexical, info);\n    };\n    result.lex = true;\n    return result;\n  }\n  function poplex() {\n    var state = cx.state;\n    if (state.lexical.prev) {\n      if (state.lexical.type == \")\")\n        state.indented = state.lexical.indented;\n      state.lexical = state.lexical.prev;\n    }\n  }\n  poplex.lex = true;\n\n  function expect(wanted) {\n    function exp(type) {\n      if (type == wanted) return cont();\n      else if (wanted == \";\") return pass();\n      else return cont(exp);\n    };\n    return exp;\n  }\n\n  function statement(type, value) {\n    if (type == \"var\") return cont(pushlex(\"vardef\", value.length), vardef, expect(\";\"), poplex);\n    if (type == \"keyword a\") return cont(pushlex(\"form\"), parenExpr, statement, poplex);\n    if (type == \"keyword b\") return cont(pushlex(\"form\"), statement, poplex);\n    if (type == \"keyword d\") return cx.stream.match(/^\\s*$/, false) ? cont() : cont(pushlex(\"stat\"), maybeexpression, expect(\";\"), poplex);\n    if (type == \"debugger\") return cont(expect(\";\"));\n    if (type == \"{\") return cont(pushlex(\"}\"), block, poplex);\n    if (type == \";\") return cont();\n    if (type == \"if\") {\n      if (cx.state.lexical.info == \"else\" && cx.state.cc[cx.state.cc.length - 1] == poplex)\n        cx.state.cc.pop()();\n      return cont(pushlex(\"form\"), parenExpr, statement, poplex, maybeelse);\n    }\n    if (type == \"function\") return cont(functiondef);\n    if (type == \"for\") return cont(pushlex(\"form\"), forspec, statement, poplex);\n    if (type == \"class\" || (isTS && value == \"interface\")) { cx.marked = \"keyword\"; return cont(pushlex(\"form\"), className, poplex); }\n    if (type == \"variable\") {\n      if (isTS && value == \"declare\") {\n        cx.marked = \"keyword\"\n        return cont(statement)\n      } else if (isTS && (value == \"module\" || value == \"enum\" || value == \"type\") && cx.stream.match(/^\\s*\\w/, false)) {\n        cx.marked = \"keyword\"\n        if (value == \"enum\") return cont(enumdef);\n        else if (value == \"type\") return cont(typeexpr, expect(\"operator\"), typeexpr, expect(\";\"));\n        else return cont(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), block, poplex, poplex)\n      } else if (isTS && value == \"namespace\") {\n        cx.marked = \"keyword\"\n        return cont(pushlex(\"form\"), expression, block, poplex)\n      } else {\n        return cont(pushlex(\"stat\"), maybelabel);\n      }\n    }\n    if (type == \"switch\") return cont(pushlex(\"form\"), parenExpr, expect(\"{\"), pushlex(\"}\", \"switch\"),\n                                      block, poplex, poplex);\n    if (type == \"case\") return cont(expression, expect(\":\"));\n    if (type == \"default\") return cont(expect(\":\"));\n    if (type == \"catch\") return cont(pushlex(\"form\"), pushcontext, expect(\"(\"), funarg, expect(\")\"),\n                                     statement, poplex, popcontext);\n    if (type == \"export\") return cont(pushlex(\"stat\"), afterExport, poplex);\n    if (type == \"import\") return cont(pushlex(\"stat\"), afterImport, poplex);\n    if (type == \"async\") return cont(statement)\n    if (value == \"@\") return cont(expression, statement)\n    return pass(pushlex(\"stat\"), expression, expect(\";\"), poplex);\n  }\n  function expression(type, value) {\n    return expressionInner(type, value, false);\n  }\n  function expressionNoComma(type, value) {\n    return expressionInner(type, value, true);\n  }\n  function parenExpr(type) {\n    if (type != \"(\") return pass()\n    return cont(pushlex(\")\"), expression, expect(\")\"), poplex)\n  }\n  function expressionInner(type, value, noComma) {\n    if (cx.state.fatArrowAt == cx.stream.start) {\n      var body = noComma ? arrowBodyNoComma : arrowBody;\n      if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, expect(\"=>\"), body, popcontext);\n      else if (type == \"variable\") return pass(pushcontext, pattern, expect(\"=>\"), body, popcontext);\n    }\n\n    var maybeop = noComma ? maybeoperatorNoComma : maybeoperatorComma;\n    if (atomicTypes.hasOwnProperty(type)) return cont(maybeop);\n    if (type == \"function\") return cont(functiondef, maybeop);\n    if (type == \"class\" || (isTS && value == \"interface\")) { cx.marked = \"keyword\"; return cont(pushlex(\"form\"), classExpression, poplex); }\n    if (type == \"keyword c\" || type == \"async\") return cont(noComma ? expressionNoComma : expression);\n    if (type == \"(\") return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex, maybeop);\n    if (type == \"operator\" || type == \"spread\") return cont(noComma ? expressionNoComma : expression);\n    if (type == \"[\") return cont(pushlex(\"]\"), arrayLiteral, poplex, maybeop);\n    if (type == \"{\") return contCommasep(objprop, \"}\", null, maybeop);\n    if (type == \"quasi\") return pass(quasi, maybeop);\n    if (type == \"new\") return cont(maybeTarget(noComma));\n    if (type == \"import\") return cont(expression);\n    return cont();\n  }\n  function maybeexpression(type) {\n    if (type.match(/[;\\}\\)\\],]/)) return pass();\n    return pass(expression);\n  }\n\n  function maybeoperatorComma(type, value) {\n    if (type == \",\") return cont(expression);\n    return maybeoperatorNoComma(type, value, false);\n  }\n  function maybeoperatorNoComma(type, value, noComma) {\n    var me = noComma == false ? maybeoperatorComma : maybeoperatorNoComma;\n    var expr = noComma == false ? expression : expressionNoComma;\n    if (type == \"=>\") return cont(pushcontext, noComma ? arrowBodyNoComma : arrowBody, popcontext);\n    if (type == \"operator\") {\n      if (/\\+\\+|--/.test(value) || isTS && value == \"!\") return cont(me);\n      if (isTS && value == \"<\" && cx.stream.match(/^([^>]|<.*?>)*>\\s*\\(/, false))\n        return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, me);\n      if (value == \"?\") return cont(expression, expect(\":\"), expr);\n      return cont(expr);\n    }\n    if (type == \"quasi\") { return pass(quasi, me); }\n    if (type == \";\") return;\n    if (type == \"(\") return contCommasep(expressionNoComma, \")\", \"call\", me);\n    if (type == \".\") return cont(property, me);\n    if (type == \"[\") return cont(pushlex(\"]\"), maybeexpression, expect(\"]\"), poplex, me);\n    if (isTS && value == \"as\") { cx.marked = \"keyword\"; return cont(typeexpr, me) }\n    if (type == \"regexp\") {\n      cx.state.lastType = cx.marked = \"operator\"\n      cx.stream.backUp(cx.stream.pos - cx.stream.start - 1)\n      return cont(expr)\n    }\n  }\n  function quasi(type, value) {\n    if (type != \"quasi\") return pass();\n    if (value.slice(value.length - 2) != \"${\") return cont(quasi);\n    return cont(expression, continueQuasi);\n  }\n  function continueQuasi(type) {\n    if (type == \"}\") {\n      cx.marked = \"string-2\";\n      cx.state.tokenize = tokenQuasi;\n      return cont(quasi);\n    }\n  }\n  function arrowBody(type) {\n    findFatArrow(cx.stream, cx.state);\n    return pass(type == \"{\" ? statement : expression);\n  }\n  function arrowBodyNoComma(type) {\n    findFatArrow(cx.stream, cx.state);\n    return pass(type == \"{\" ? statement : expressionNoComma);\n  }\n  function maybeTarget(noComma) {\n    return function(type) {\n      if (type == \".\") return cont(noComma ? targetNoComma : target);\n      else if (type == \"variable\" && isTS) return cont(maybeTypeArgs, noComma ? maybeoperatorNoComma : maybeoperatorComma)\n      else return pass(noComma ? expressionNoComma : expression);\n    };\n  }\n  function target(_, value) {\n    if (value == \"target\") { cx.marked = \"keyword\"; return cont(maybeoperatorComma); }\n  }\n  function targetNoComma(_, value) {\n    if (value == \"target\") { cx.marked = \"keyword\"; return cont(maybeoperatorNoComma); }\n  }\n  function maybelabel(type) {\n    if (type == \":\") return cont(poplex, statement);\n    return pass(maybeoperatorComma, expect(\";\"), poplex);\n  }\n  function property(type) {\n    if (type == \"variable\") {cx.marked = \"property\"; return cont();}\n  }\n  function objprop(type, value) {\n    if (type == \"async\") {\n      cx.marked = \"property\";\n      return cont(objprop);\n    } else if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\";\n      if (value == \"get\" || value == \"set\") return cont(getterSetter);\n      var m // Work around fat-arrow-detection complication for detecting typescript typed arrow params\n      if (isTS && cx.state.fatArrowAt == cx.stream.start && (m = cx.stream.match(/^\\s*:\\s*/, false)))\n        cx.state.fatArrowAt = cx.stream.pos + m[0].length\n      return cont(afterprop);\n    } else if (type == \"number\" || type == \"string\") {\n      cx.marked = jsonldMode ? \"property\" : (cx.style + \" property\");\n      return cont(afterprop);\n    } else if (type == \"jsonld-keyword\") {\n      return cont(afterprop);\n    } else if (isTS && isModifier(value)) {\n      cx.marked = \"keyword\"\n      return cont(objprop)\n    } else if (type == \"[\") {\n      return cont(expression, maybetype, expect(\"]\"), afterprop);\n    } else if (type == \"spread\") {\n      return cont(expressionNoComma, afterprop);\n    } else if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(objprop);\n    } else if (type == \":\") {\n      return pass(afterprop)\n    }\n  }\n  function getterSetter(type) {\n    if (type != \"variable\") return pass(afterprop);\n    cx.marked = \"property\";\n    return cont(functiondef);\n  }\n  function afterprop(type) {\n    if (type == \":\") return cont(expressionNoComma);\n    if (type == \"(\") return pass(functiondef);\n  }\n  function commasep(what, end, sep) {\n    function proceed(type, value) {\n      if (sep ? sep.indexOf(type) > -1 : type == \",\") {\n        var lex = cx.state.lexical;\n        if (lex.info == \"call\") lex.pos = (lex.pos || 0) + 1;\n        return cont(function(type, value) {\n          if (type == end || value == end) return pass()\n          return pass(what)\n        }, proceed);\n      }\n      if (type == end || value == end) return cont();\n      return cont(expect(end));\n    }\n    return function(type, value) {\n      if (type == end || value == end) return cont();\n      return pass(what, proceed);\n    };\n  }\n  function contCommasep(what, end, info) {\n    for (var i = 3; i < arguments.length; i++)\n      cx.cc.push(arguments[i]);\n    return cont(pushlex(end, info), commasep(what, end), poplex);\n  }\n  function block(type) {\n    if (type == \"}\") return cont();\n    return pass(statement, block);\n  }\n  function maybetype(type, value) {\n    if (isTS) {\n      if (type == \":\") return cont(typeexpr);\n      if (value == \"?\") return cont(maybetype);\n    }\n  }\n  function mayberettype(type) {\n    if (isTS && type == \":\") {\n      if (cx.stream.match(/^\\s*\\w+\\s+is\\b/, false)) return cont(expression, isKW, typeexpr)\n      else return cont(typeexpr)\n    }\n  }\n  function isKW(_, value) {\n    if (value == \"is\") {\n      cx.marked = \"keyword\"\n      return cont()\n    }\n  }\n  function typeexpr(type, value) {\n    if (value == \"keyof\" || value == \"typeof\") {\n      cx.marked = \"keyword\"\n      return cont(value == \"keyof\" ? typeexpr : expression)\n    }\n    if (type == \"variable\" || value == \"void\") {\n      cx.marked = \"type\"\n      return cont(afterType)\n    }\n    if (type == \"string\" || type == \"number\" || type == \"atom\") return cont(afterType);\n    if (type == \"[\") return cont(pushlex(\"]\"), commasep(typeexpr, \"]\", \",\"), poplex, afterType)\n    if (type == \"{\") return cont(pushlex(\"}\"), commasep(typeprop, \"}\", \",;\"), poplex, afterType)\n    if (type == \"(\") return cont(commasep(typearg, \")\"), maybeReturnType)\n  }\n  function maybeReturnType(type) {\n    if (type == \"=>\") return cont(typeexpr)\n  }\n  function typeprop(type, value) {\n    if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\"\n      return cont(typeprop)\n    } else if (value == \"?\") {\n      return cont(typeprop)\n    } else if (type == \":\") {\n      return cont(typeexpr)\n    } else if (type == \"[\") {\n      return cont(expression, maybetype, expect(\"]\"), typeprop)\n    }\n  }\n  function typearg(type) {\n    if (type == \"variable\") return cont(typearg)\n    else if (type == \":\") return cont(typeexpr)\n  }\n  function afterType(type, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType)\n    if (value == \"|\" || type == \".\" || value == \"&\") return cont(typeexpr)\n    if (type == \"[\") return cont(expect(\"]\"), afterType)\n    if (value == \"extends\" || value == \"implements\") { cx.marked = \"keyword\"; return cont(typeexpr) }\n  }\n  function maybeTypeArgs(_, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType)\n  }\n  function typeparam() {\n    return pass(typeexpr, maybeTypeDefault)\n  }\n  function maybeTypeDefault(_, value) {\n    if (value == \"=\") return cont(typeexpr)\n  }\n  function vardef(_, value) {\n    if (value == \"enum\") {cx.marked = \"keyword\"; return cont(enumdef)}\n    return pass(pattern, maybetype, maybeAssign, vardefCont);\n  }\n  function pattern(type, value) {\n    if (isTS && isModifier(value)) { cx.marked = \"keyword\"; return cont(pattern) }\n    if (type == \"variable\") { register(value); return cont(); }\n    if (type == \"spread\") return cont(pattern);\n    if (type == \"[\") return contCommasep(pattern, \"]\");\n    if (type == \"{\") return contCommasep(proppattern, \"}\");\n  }\n  function proppattern(type, value) {\n    if (type == \"variable\" && !cx.stream.match(/^\\s*:/, false)) {\n      register(value);\n      return cont(maybeAssign);\n    }\n    if (type == \"variable\") cx.marked = \"property\";\n    if (type == \"spread\") return cont(pattern);\n    if (type == \"}\") return pass();\n    return cont(expect(\":\"), pattern, maybeAssign);\n  }\n  function maybeAssign(_type, value) {\n    if (value == \"=\") return cont(expressionNoComma);\n  }\n  function vardefCont(type) {\n    if (type == \",\") return cont(vardef);\n  }\n  function maybeelse(type, value) {\n    if (type == \"keyword b\" && value == \"else\") return cont(pushlex(\"form\", \"else\"), statement, poplex);\n  }\n  function forspec(type, value) {\n    if (value == \"await\") return cont(forspec);\n    if (type == \"(\") return cont(pushlex(\")\"), forspec1, expect(\")\"), poplex);\n  }\n  function forspec1(type) {\n    if (type == \"var\") return cont(vardef, expect(\";\"), forspec2);\n    if (type == \";\") return cont(forspec2);\n    if (type == \"variable\") return cont(formaybeinof);\n    return pass(expression, expect(\";\"), forspec2);\n  }\n  function formaybeinof(_type, value) {\n    if (value == \"in\" || value == \"of\") { cx.marked = \"keyword\"; return cont(expression); }\n    return cont(maybeoperatorComma, forspec2);\n  }\n  function forspec2(type, value) {\n    if (type == \";\") return cont(forspec3);\n    if (value == \"in\" || value == \"of\") { cx.marked = \"keyword\"; return cont(expression); }\n    return pass(expression, expect(\";\"), forspec3);\n  }\n  function forspec3(type) {\n    if (type != \")\") cont(expression);\n  }\n  function functiondef(type, value) {\n    if (value == \"*\") {cx.marked = \"keyword\"; return cont(functiondef);}\n    if (type == \"variable\") {register(value); return cont(functiondef);}\n    if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, statement, popcontext);\n    if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondef)\n  }\n  function funarg(type, value) {\n    if (value == \"@\") cont(expression, funarg)\n    if (type == \"spread\") return cont(funarg);\n    if (isTS && isModifier(value)) { cx.marked = \"keyword\"; return cont(funarg); }\n    return pass(pattern, maybetype, maybeAssign);\n  }\n  function classExpression(type, value) {\n    // Class expressions may have an optional name.\n    if (type == \"variable\") return className(type, value);\n    return classNameAfter(type, value);\n  }\n  function className(type, value) {\n    if (type == \"variable\") {register(value); return cont(classNameAfter);}\n  }\n  function classNameAfter(type, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, classNameAfter)\n    if (value == \"extends\" || value == \"implements\" || (isTS && type == \",\")) {\n      if (value == \"implements\") cx.marked = \"keyword\";\n      return cont(isTS ? typeexpr : expression, classNameAfter);\n    }\n    if (type == \"{\") return cont(pushlex(\"}\"), classBody, poplex);\n  }\n  function classBody(type, value) {\n    if (type == \"async\" ||\n        (type == \"variable\" &&\n         (value == \"static\" || value == \"get\" || value == \"set\" || (isTS && isModifier(value))) &&\n         cx.stream.match(/^\\s+[\\w$\\xa1-\\uffff]/, false))) {\n      cx.marked = \"keyword\";\n      return cont(classBody);\n    }\n    if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\";\n      return cont(isTS ? classfield : functiondef, classBody);\n    }\n    if (type == \"[\")\n      return cont(expression, maybetype, expect(\"]\"), isTS ? classfield : functiondef, classBody)\n    if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(classBody);\n    }\n    if (type == \";\") return cont(classBody);\n    if (type == \"}\") return cont();\n    if (value == \"@\") return cont(expression, classBody)\n  }\n  function classfield(type, value) {\n    if (value == \"?\") return cont(classfield)\n    if (type == \":\") return cont(typeexpr, maybeAssign)\n    if (value == \"=\") return cont(expressionNoComma)\n    return pass(functiondef)\n  }\n  function afterExport(type, value) {\n    if (value == \"*\") { cx.marked = \"keyword\"; return cont(maybeFrom, expect(\";\")); }\n    if (value == \"default\") { cx.marked = \"keyword\"; return cont(expression, expect(\";\")); }\n    if (type == \"{\") return cont(commasep(exportField, \"}\"), maybeFrom, expect(\";\"));\n    return pass(statement);\n  }\n  function exportField(type, value) {\n    if (value == \"as\") { cx.marked = \"keyword\"; return cont(expect(\"variable\")); }\n    if (type == \"variable\") return pass(expressionNoComma, exportField);\n  }\n  function afterImport(type) {\n    if (type == \"string\") return cont();\n    if (type == \"(\") return pass(expression);\n    return pass(importSpec, maybeMoreImports, maybeFrom);\n  }\n  function importSpec(type, value) {\n    if (type == \"{\") return contCommasep(importSpec, \"}\");\n    if (type == \"variable\") register(value);\n    if (value == \"*\") cx.marked = \"keyword\";\n    return cont(maybeAs);\n  }\n  function maybeMoreImports(type) {\n    if (type == \",\") return cont(importSpec, maybeMoreImports)\n  }\n  function maybeAs(_type, value) {\n    if (value == \"as\") { cx.marked = \"keyword\"; return cont(importSpec); }\n  }\n  function maybeFrom(_type, value) {\n    if (value == \"from\") { cx.marked = \"keyword\"; return cont(expression); }\n  }\n  function arrayLiteral(type) {\n    if (type == \"]\") return cont();\n    return pass(commasep(expressionNoComma, \"]\"));\n  }\n  function enumdef() {\n    return pass(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), commasep(enummember, \"}\"), poplex, poplex)\n  }\n  function enummember() {\n    return pass(pattern, maybeAssign);\n  }\n\n  function isContinuedStatement(state, textAfter) {\n    return state.lastType == \"operator\" || state.lastType == \",\" ||\n      isOperatorChar.test(textAfter.charAt(0)) ||\n      /[,.]/.test(textAfter.charAt(0));\n  }\n\n  function expressionAllowed(stream, state, backUp) {\n    return state.tokenize == tokenBase &&\n      /^(?:operator|sof|keyword [bcd]|case|new|export|default|spread|[\\[{}\\(,;:]|=>)$/.test(state.lastType) ||\n      (state.lastType == \"quasi\" && /\\{\\s*$/.test(stream.string.slice(0, stream.pos - (backUp || 0))))\n  }\n\n  // Interface\n\n  return {\n    startState: function(basecolumn) {\n      var state = {\n        tokenize: tokenBase,\n        lastType: \"sof\",\n        cc: [],\n        lexical: new JSLexical((basecolumn || 0) - indentUnit, 0, \"block\", false),\n        localVars: parserConfig.localVars,\n        context: parserConfig.localVars && {vars: parserConfig.localVars},\n        indented: basecolumn || 0\n      };\n      if (parserConfig.globalVars && typeof parserConfig.globalVars == \"object\")\n        state.globalVars = parserConfig.globalVars;\n      return state;\n    },\n\n    token: function(stream, state) {\n      if (stream.sol()) {\n        if (!state.lexical.hasOwnProperty(\"align\"))\n          state.lexical.align = false;\n        state.indented = stream.indentation();\n        findFatArrow(stream, state);\n      }\n      if (state.tokenize != tokenComment && stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n      if (type == \"comment\") return style;\n      state.lastType = type == \"operator\" && (content == \"++\" || content == \"--\") ? \"incdec\" : type;\n      return parseJS(state, style, type, content, stream);\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize == tokenComment) return CodeMirror.Pass;\n      if (state.tokenize != tokenBase) return 0;\n      var firstChar = textAfter && textAfter.charAt(0), lexical = state.lexical, top\n      // Kludge to prevent 'maybelse' from blocking lexical scope pops\n      if (!/^\\s*else\\b/.test(textAfter)) for (var i = state.cc.length - 1; i >= 0; --i) {\n        var c = state.cc[i];\n        if (c == poplex) lexical = lexical.prev;\n        else if (c != maybeelse) break;\n      }\n      while ((lexical.type == \"stat\" || lexical.type == \"form\") &&\n             (firstChar == \"}\" || ((top = state.cc[state.cc.length - 1]) &&\n                                   (top == maybeoperatorComma || top == maybeoperatorNoComma) &&\n                                   !/^[,\\.=+\\-*:?[\\(]/.test(textAfter))))\n        lexical = lexical.prev;\n      if (statementIndent && lexical.type == \")\" && lexical.prev.type == \"stat\")\n        lexical = lexical.prev;\n      var type = lexical.type, closing = firstChar == type;\n\n      if (type == \"vardef\") return lexical.indented + (state.lastType == \"operator\" || state.lastType == \",\" ? lexical.info + 1 : 0);\n      else if (type == \"form\" && firstChar == \"{\") return lexical.indented;\n      else if (type == \"form\") return lexical.indented + indentUnit;\n      else if (type == \"stat\")\n        return lexical.indented + (isContinuedStatement(state, textAfter) ? statementIndent || indentUnit : 0);\n      else if (lexical.info == \"switch\" && !closing && parserConfig.doubleIndentSwitch != false)\n        return lexical.indented + (/^(?:case|default)\\b/.test(textAfter) ? indentUnit : 2 * indentUnit);\n      else if (lexical.align) return lexical.column + (closing ? 0 : 1);\n      else return lexical.indented + (closing ? 0 : indentUnit);\n    },\n\n    electricInput: /^\\s*(?:case .*?:|default:|\\{|\\})$/,\n    blockCommentStart: jsonMode ? null : \"/*\",\n    blockCommentEnd: jsonMode ? null : \"*/\",\n    blockCommentContinue: jsonMode ? null : \" * \",\n    lineComment: jsonMode ? null : \"//\",\n    fold: \"brace\",\n    closeBrackets: \"()[]{}''\\\"\\\"``\",\n\n    helperType: jsonMode ? \"json\" : \"javascript\",\n    jsonldMode: jsonldMode,\n    jsonMode: jsonMode,\n\n    expressionAllowed: expressionAllowed,\n\n    skipExpression: function(state) {\n      var top = state.cc[state.cc.length - 1]\n      if (top == expression || top == expressionNoComma) state.cc.pop()\n    }\n  };\n});\n\nCodeMirror.registerHelper(\"wordChars\", \"javascript\", /[\\w$]/);\n\nCodeMirror.defineMIME(\"text/javascript\", \"javascript\");\nCodeMirror.defineMIME(\"text/ecmascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/javascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/x-javascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/ecmascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/json\", {name: \"javascript\", json: true});\nCodeMirror.defineMIME(\"application/x-json\", {name: \"javascript\", json: true});\nCodeMirror.defineMIME(\"application/ld+json\", {name: \"javascript\", jsonld: true});\nCodeMirror.defineMIME(\"text/typescript\", { name: \"javascript\", typescript: true });\nCodeMirror.defineMIME(\"application/typescript\", { name: \"javascript\", typescript: true });\n\n});\n"],"sourceRoot":""}