{"version":3,"sources":["../node_modules/codemirror/addon/dialog/dialog.js"],"names":["CodeMirror","dialogDiv","cm","template","bottom","dialog","getWrapperElement","appendChild","document","createElement","className","innerHTML","closeNotification","newVal","state","currentNotificationClose","defineExtension","callback","options","this","closed","me","close","inp","value","parentNode","removeChild","focus","onClose","button","getElementsByTagName","selectValueOnOpen","select","onInput","on","e","onKeyUp","onKeyDown","keyCode","closeOnEnter","blur","e_stop","closeOnBlur","callbacks","buttons","blurring","i","length","b","e_preventDefault","setTimeout","doneTimer","duration","clearTimeout","mod"],"mappings":"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","file":"static/js/6.26aa2793.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n// Open simple dialogs on top of an editor. Relies on dialog.css.\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  function dialogDiv(cm, template, bottom) {\n    var wrap = cm.getWrapperElement();\n    var dialog;\n    dialog = wrap.appendChild(document.createElement(\"div\"));\n    if (bottom)\n      dialog.className = \"CodeMirror-dialog CodeMirror-dialog-bottom\";\n    else\n      dialog.className = \"CodeMirror-dialog CodeMirror-dialog-top\";\n\n    if (typeof template == \"string\") {\n      dialog.innerHTML = template;\n    } else { // Assuming it's a detached DOM element.\n      dialog.appendChild(template);\n    }\n    return dialog;\n  }\n\n  function closeNotification(cm, newVal) {\n    if (cm.state.currentNotificationClose)\n      cm.state.currentNotificationClose();\n    cm.state.currentNotificationClose = newVal;\n  }\n\n  CodeMirror.defineExtension(\"openDialog\", function(template, callback, options) {\n    if (!options) options = {};\n\n    closeNotification(this, null);\n\n    var dialog = dialogDiv(this, template, options.bottom);\n    var closed = false, me = this;\n    function close(newVal) {\n      if (typeof newVal == 'string') {\n        inp.value = newVal;\n      } else {\n        if (closed) return;\n        closed = true;\n        dialog.parentNode.removeChild(dialog);\n        me.focus();\n\n        if (options.onClose) options.onClose(dialog);\n      }\n    }\n\n    var inp = dialog.getElementsByTagName(\"input\")[0], button;\n    if (inp) {\n      inp.focus();\n\n      if (options.value) {\n        inp.value = options.value;\n        if (options.selectValueOnOpen !== false) {\n          inp.select();\n        }\n      }\n\n      if (options.onInput)\n        CodeMirror.on(inp, \"input\", function(e) { options.onInput(e, inp.value, close);});\n      if (options.onKeyUp)\n        CodeMirror.on(inp, \"keyup\", function(e) {options.onKeyUp(e, inp.value, close);});\n\n      CodeMirror.on(inp, \"keydown\", function(e) {\n        if (options && options.onKeyDown && options.onKeyDown(e, inp.value, close)) { return; }\n        if (e.keyCode == 27 || (options.closeOnEnter !== false && e.keyCode == 13)) {\n          inp.blur();\n          CodeMirror.e_stop(e);\n          close();\n        }\n        if (e.keyCode == 13) callback(inp.value, e);\n      });\n\n      if (options.closeOnBlur !== false) CodeMirror.on(inp, \"blur\", close);\n    } else if (button = dialog.getElementsByTagName(\"button\")[0]) {\n      CodeMirror.on(button, \"click\", function() {\n        close();\n        me.focus();\n      });\n\n      if (options.closeOnBlur !== false) CodeMirror.on(button, \"blur\", close);\n\n      button.focus();\n    }\n    return close;\n  });\n\n  CodeMirror.defineExtension(\"openConfirm\", function(template, callbacks, options) {\n    closeNotification(this, null);\n    var dialog = dialogDiv(this, template, options && options.bottom);\n    var buttons = dialog.getElementsByTagName(\"button\");\n    var closed = false, me = this, blurring = 1;\n    function close() {\n      if (closed) return;\n      closed = true;\n      dialog.parentNode.removeChild(dialog);\n      me.focus();\n    }\n    buttons[0].focus();\n    for (var i = 0; i < buttons.length; ++i) {\n      var b = buttons[i];\n      (function(callback) {\n        CodeMirror.on(b, \"click\", function(e) {\n          CodeMirror.e_preventDefault(e);\n          close();\n          if (callback) callback(me);\n        });\n      })(callbacks[i]);\n      CodeMirror.on(b, \"blur\", function() {\n        --blurring;\n        setTimeout(function() { if (blurring <= 0) close(); }, 200);\n      });\n      CodeMirror.on(b, \"focus\", function() { ++blurring; });\n    }\n  });\n\n  /*\n   * openNotification\n   * Opens a notification, that can be closed with an optional timer\n   * (default 5000ms timer) and always closes on click.\n   *\n   * If a notification is opened while another is opened, it will close the\n   * currently opened one and open the new one immediately.\n   */\n  CodeMirror.defineExtension(\"openNotification\", function(template, options) {\n    closeNotification(this, close);\n    var dialog = dialogDiv(this, template, options && options.bottom);\n    var closed = false, doneTimer;\n    var duration = options && typeof options.duration !== \"undefined\" ? options.duration : 5000;\n\n    function close() {\n      if (closed) return;\n      closed = true;\n      clearTimeout(doneTimer);\n      dialog.parentNode.removeChild(dialog);\n    }\n\n    CodeMirror.on(dialog, 'click', function(e) {\n      CodeMirror.e_preventDefault(e);\n      close();\n    });\n\n    if (duration)\n      doneTimer = setTimeout(close, duration);\n\n    return close;\n  });\n});\n"],"sourceRoot":""}