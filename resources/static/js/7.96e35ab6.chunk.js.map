{"version":3,"sources":["../node_modules/codemirror/addon/search/searchcursor.js"],"names":["CodeMirror","doFold","noFold","Pos","ensureFlags","regexp","flags","current","ignoreCase","global","multiline","regexpFlags","target","i","length","indexOf","charAt","RegExp","source","searchRegexpForward","doc","start","line","ch","last","lastLine","lastIndex","string","getLine","match","exec","from","index","to","searchRegexpForwardMultiline","test","maybeMultiline","chunk","curLine","before","slice","split","inside","startLine","startCh","lastMatchIn","cutOff","newMatch","searchRegexpBackward","first","firstLine","searchRegexpBackwardMultiline","adjustPos","orig","folded","pos","foldFunc","min","max","Math","mid","len","searchStringForward","query","caseFold","fold","lines","search","found","cutFrom","end","endString","searchStringBackward","lastIndexOf","top","topString","SearchCursor","options","this","atOccurrence","clipPos","matches","reverse","String","prototype","normalize","str","toLowerCase","findNext","find","findPrevious","result","cmpPos","replace","newText","origin","splitLines","replaceRange","defineExtension","defineDocExtension","ranges","cur","getSearchCursor","getCursor","push","anchor","head","setSelections","mod"],"mappings":"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","file":"static/js/7.96e35ab6.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"))\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod)\n  else // Plain browser env\n    mod(CodeMirror)\n})(function(CodeMirror) {\n  \"use strict\"\n  var Pos = CodeMirror.Pos\n\n  function regexpFlags(regexp) {\n    var flags = regexp.flags\n    return flags != null ? flags : (regexp.ignoreCase ? \"i\" : \"\")\n      + (regexp.global ? \"g\" : \"\")\n      + (regexp.multiline ? \"m\" : \"\")\n  }\n\n  function ensureFlags(regexp, flags) {\n    var current = regexpFlags(regexp), target = current\n    for (var i = 0; i < flags.length; i++) if (target.indexOf(flags.charAt(i)) == -1)\n      target += flags.charAt(i)\n    return current == target ? regexp : new RegExp(regexp.source, target)\n  }\n\n  function maybeMultiline(regexp) {\n    return /\\\\s|\\\\n|\\n|\\\\W|\\\\D|\\[\\^/.test(regexp.source)\n  }\n\n  function searchRegexpForward(doc, regexp, start) {\n    regexp = ensureFlags(regexp, \"g\")\n    for (var line = start.line, ch = start.ch, last = doc.lastLine(); line <= last; line++, ch = 0) {\n      regexp.lastIndex = ch\n      var string = doc.getLine(line), match = regexp.exec(string)\n      if (match)\n        return {from: Pos(line, match.index),\n                to: Pos(line, match.index + match[0].length),\n                match: match}\n    }\n  }\n\n  function searchRegexpForwardMultiline(doc, regexp, start) {\n    if (!maybeMultiline(regexp)) return searchRegexpForward(doc, regexp, start)\n\n    regexp = ensureFlags(regexp, \"gm\")\n    var string, chunk = 1\n    for (var line = start.line, last = doc.lastLine(); line <= last;) {\n      // This grows the search buffer in exponentially-sized chunks\n      // between matches, so that nearby matches are fast and don't\n      // require concatenating the whole document (in case we're\n      // searching for something that has tons of matches), but at the\n      // same time, the amount of retries is limited.\n      for (var i = 0; i < chunk; i++) {\n        if (line > last) break\n        var curLine = doc.getLine(line++)\n        string = string == null ? curLine : string + \"\\n\" + curLine\n      }\n      chunk = chunk * 2\n      regexp.lastIndex = start.ch\n      var match = regexp.exec(string)\n      if (match) {\n        var before = string.slice(0, match.index).split(\"\\n\"), inside = match[0].split(\"\\n\")\n        var startLine = start.line + before.length - 1, startCh = before[before.length - 1].length\n        return {from: Pos(startLine, startCh),\n                to: Pos(startLine + inside.length - 1,\n                        inside.length == 1 ? startCh + inside[0].length : inside[inside.length - 1].length),\n                match: match}\n      }\n    }\n  }\n\n  function lastMatchIn(string, regexp) {\n    var cutOff = 0, match\n    for (;;) {\n      regexp.lastIndex = cutOff\n      var newMatch = regexp.exec(string)\n      if (!newMatch) return match\n      match = newMatch\n      cutOff = match.index + (match[0].length || 1)\n      if (cutOff == string.length) return match\n    }\n  }\n\n  function searchRegexpBackward(doc, regexp, start) {\n    regexp = ensureFlags(regexp, \"g\")\n    for (var line = start.line, ch = start.ch, first = doc.firstLine(); line >= first; line--, ch = -1) {\n      var string = doc.getLine(line)\n      if (ch > -1) string = string.slice(0, ch)\n      var match = lastMatchIn(string, regexp)\n      if (match)\n        return {from: Pos(line, match.index),\n                to: Pos(line, match.index + match[0].length),\n                match: match}\n    }\n  }\n\n  function searchRegexpBackwardMultiline(doc, regexp, start) {\n    regexp = ensureFlags(regexp, \"gm\")\n    var string, chunk = 1\n    for (var line = start.line, first = doc.firstLine(); line >= first;) {\n      for (var i = 0; i < chunk; i++) {\n        var curLine = doc.getLine(line--)\n        string = string == null ? curLine.slice(0, start.ch) : curLine + \"\\n\" + string\n      }\n      chunk *= 2\n\n      var match = lastMatchIn(string, regexp)\n      if (match) {\n        var before = string.slice(0, match.index).split(\"\\n\"), inside = match[0].split(\"\\n\")\n        var startLine = line + before.length, startCh = before[before.length - 1].length\n        return {from: Pos(startLine, startCh),\n                to: Pos(startLine + inside.length - 1,\n                        inside.length == 1 ? startCh + inside[0].length : inside[inside.length - 1].length),\n                match: match}\n      }\n    }\n  }\n\n  var doFold, noFold\n  if (String.prototype.normalize) {\n    doFold = function(str) { return str.normalize(\"NFD\").toLowerCase() }\n    noFold = function(str) { return str.normalize(\"NFD\") }\n  } else {\n    doFold = function(str) { return str.toLowerCase() }\n    noFold = function(str) { return str }\n  }\n\n  // Maps a position in a case-folded line back to a position in the original line\n  // (compensating for codepoints increasing in number during folding)\n  function adjustPos(orig, folded, pos, foldFunc) {\n    if (orig.length == folded.length) return pos\n    for (var min = 0, max = pos + Math.max(0, orig.length - folded.length);;) {\n      if (min == max) return min\n      var mid = (min + max) >> 1\n      var len = foldFunc(orig.slice(0, mid)).length\n      if (len == pos) return mid\n      else if (len > pos) max = mid\n      else min = mid + 1\n    }\n  }\n\n  function searchStringForward(doc, query, start, caseFold) {\n    // Empty string would match anything and never progress, so we\n    // define it to match nothing instead.\n    if (!query.length) return null\n    var fold = caseFold ? doFold : noFold\n    var lines = fold(query).split(/\\r|\\n\\r?/)\n\n    search: for (var line = start.line, ch = start.ch, last = doc.lastLine() + 1 - lines.length; line <= last; line++, ch = 0) {\n      var orig = doc.getLine(line).slice(ch), string = fold(orig)\n      if (lines.length == 1) {\n        var found = string.indexOf(lines[0])\n        if (found == -1) continue search\n        var start = adjustPos(orig, string, found, fold) + ch\n        return {from: Pos(line, adjustPos(orig, string, found, fold) + ch),\n                to: Pos(line, adjustPos(orig, string, found + lines[0].length, fold) + ch)}\n      } else {\n        var cutFrom = string.length - lines[0].length\n        if (string.slice(cutFrom) != lines[0]) continue search\n        for (var i = 1; i < lines.length - 1; i++)\n          if (fold(doc.getLine(line + i)) != lines[i]) continue search\n        var end = doc.getLine(line + lines.length - 1), endString = fold(end), lastLine = lines[lines.length - 1]\n        if (endString.slice(0, lastLine.length) != lastLine) continue search\n        return {from: Pos(line, adjustPos(orig, string, cutFrom, fold) + ch),\n                to: Pos(line + lines.length - 1, adjustPos(end, endString, lastLine.length, fold))}\n      }\n    }\n  }\n\n  function searchStringBackward(doc, query, start, caseFold) {\n    if (!query.length) return null\n    var fold = caseFold ? doFold : noFold\n    var lines = fold(query).split(/\\r|\\n\\r?/)\n\n    search: for (var line = start.line, ch = start.ch, first = doc.firstLine() - 1 + lines.length; line >= first; line--, ch = -1) {\n      var orig = doc.getLine(line)\n      if (ch > -1) orig = orig.slice(0, ch)\n      var string = fold(orig)\n      if (lines.length == 1) {\n        var found = string.lastIndexOf(lines[0])\n        if (found == -1) continue search\n        return {from: Pos(line, adjustPos(orig, string, found, fold)),\n                to: Pos(line, adjustPos(orig, string, found + lines[0].length, fold))}\n      } else {\n        var lastLine = lines[lines.length - 1]\n        if (string.slice(0, lastLine.length) != lastLine) continue search\n        for (var i = 1, start = line - lines.length + 1; i < lines.length - 1; i++)\n          if (fold(doc.getLine(start + i)) != lines[i]) continue search\n        var top = doc.getLine(line + 1 - lines.length), topString = fold(top)\n        if (topString.slice(topString.length - lines[0].length) != lines[0]) continue search\n        return {from: Pos(line + 1 - lines.length, adjustPos(top, topString, top.length - lines[0].length, fold)),\n                to: Pos(line, adjustPos(orig, string, lastLine.length, fold))}\n      }\n    }\n  }\n\n  function SearchCursor(doc, query, pos, options) {\n    this.atOccurrence = false\n    this.doc = doc\n    pos = pos ? doc.clipPos(pos) : Pos(0, 0)\n    this.pos = {from: pos, to: pos}\n\n    var caseFold\n    if (typeof options == \"object\") {\n      caseFold = options.caseFold\n    } else { // Backwards compat for when caseFold was the 4th argument\n      caseFold = options\n      options = null\n    }\n\n    if (typeof query == \"string\") {\n      if (caseFold == null) caseFold = false\n      this.matches = function(reverse, pos) {\n        return (reverse ? searchStringBackward : searchStringForward)(doc, query, pos, caseFold)\n      }\n    } else {\n      query = ensureFlags(query, \"gm\")\n      if (!options || options.multiline !== false)\n        this.matches = function(reverse, pos) {\n          return (reverse ? searchRegexpBackwardMultiline : searchRegexpForwardMultiline)(doc, query, pos)\n        }\n      else\n        this.matches = function(reverse, pos) {\n          return (reverse ? searchRegexpBackward : searchRegexpForward)(doc, query, pos)\n        }\n    }\n  }\n\n  SearchCursor.prototype = {\n    findNext: function() {return this.find(false)},\n    findPrevious: function() {return this.find(true)},\n\n    find: function(reverse) {\n      var result = this.matches(reverse, this.doc.clipPos(reverse ? this.pos.from : this.pos.to))\n\n      // Implements weird auto-growing behavior on null-matches for\n      // backwards-compatiblity with the vim code (unfortunately)\n      while (result && CodeMirror.cmpPos(result.from, result.to) == 0) {\n        if (reverse) {\n          if (result.from.ch) result.from = Pos(result.from.line, result.from.ch - 1)\n          else if (result.from.line == this.doc.firstLine()) result = null\n          else result = this.matches(reverse, this.doc.clipPos(Pos(result.from.line - 1)))\n        } else {\n          if (result.to.ch < this.doc.getLine(result.to.line).length) result.to = Pos(result.to.line, result.to.ch + 1)\n          else if (result.to.line == this.doc.lastLine()) result = null\n          else result = this.matches(reverse, Pos(result.to.line + 1, 0))\n        }\n      }\n\n      if (result) {\n        this.pos = result\n        this.atOccurrence = true\n        return this.pos.match || true\n      } else {\n        var end = Pos(reverse ? this.doc.firstLine() : this.doc.lastLine() + 1, 0)\n        this.pos = {from: end, to: end}\n        return this.atOccurrence = false\n      }\n    },\n\n    from: function() {if (this.atOccurrence) return this.pos.from},\n    to: function() {if (this.atOccurrence) return this.pos.to},\n\n    replace: function(newText, origin) {\n      if (!this.atOccurrence) return\n      var lines = CodeMirror.splitLines(newText)\n      this.doc.replaceRange(lines, this.pos.from, this.pos.to, origin)\n      this.pos.to = Pos(this.pos.from.line + lines.length - 1,\n                        lines[lines.length - 1].length + (lines.length == 1 ? this.pos.from.ch : 0))\n    }\n  }\n\n  CodeMirror.defineExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this.doc, query, pos, caseFold)\n  })\n  CodeMirror.defineDocExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this, query, pos, caseFold)\n  })\n\n  CodeMirror.defineExtension(\"selectMatches\", function(query, caseFold) {\n    var ranges = []\n    var cur = this.getSearchCursor(query, this.getCursor(\"from\"), caseFold)\n    while (cur.findNext()) {\n      if (CodeMirror.cmpPos(cur.to(), this.getCursor(\"to\")) > 0) break\n      ranges.push({anchor: cur.from(), head: cur.to()})\n    }\n    if (ranges.length)\n      this.setSelections(ranges, 0)\n  })\n});\n"],"sourceRoot":""}